<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术干货分享 | zhulg技术博客</title>
  
  <subtitle>专注全栈开发、技术分享与解决方案</subtitle>
  <link href="https://zhulg.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhulg.github.io/"/>
  <updated>2025-01-03T08:15:02.681Z</updated>
  <id>https://zhulg.github.io/</id>
  
  <author>
    <name>zhulg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Screenity让视频录制变得简单免费,github Star 13K技术背书</title>
    <link href="https://zhulg.github.io/posts/6f586b6b.html"/>
    <id>https://zhulg.github.io/posts/6f586b6b.html</id>
    <published>2025-01-03T08:09:49.000Z</published>
    <updated>2025-01-03T08:15:02.681Z</updated>
    
    <content type="html"><![CDATA[<p>无论你是开发者、产品经理、教师，自媒体内容创作者，在工作中总会遇到录屏的需求。可是，市面上的录屏软件大多存在功能限制，很多需要付费解锁高级功能，甚至有的还要求你充会员才能使用完整版。更别提那些软件菜单复杂、操作繁琐，让普通人看了头大的情况了…</p><p><strong>今天我要推荐给你一款绝对让你眼前一亮的录屏工具，Screenity，我最近也在使用，录制课程，培训讲解，视频画中画都支持。</strong></p><p>它不仅支持多种录制选项，也可以后期编辑和标注功能，帮助你轻松录制、编辑和导出专业级视频效果。</p><p><strong>最重要的是，它完全免费、无需注册（因为代码是开源的），就让你用得安心，省心！</strong></p><h2 id="先看下作者信息"><a href="#先看下作者信息" class="headerlink" title="先看下作者信息"></a>先看下作者信息</h2><p>这个软件的作者也是一位厉害的美女开发alyssaxuu，她身兼多职也是一名连续创业者，从她的github上可以看到一些信息，她这款软件目前在github上已经13K star。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250103161356949" alt="图片"></p><p>在 Chrome Web Store 上，已经获得了 200,000+ 安装量，评分也比较高，用户也给出了极高的评价。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250103161435793" alt="图片"></p><h3 id="产品核心功能"><a href="#产品核心功能" class="headerlink" title="产品核心功能"></a>产品核心功能</h3><p>市面上很多视频制作，特别是知识讲解类视频制作，一般比较有名的有obs、screen studio 这2个如果使用过的应该知道，obs的操作上多少有些繁琐，但也比较稳定，screen studio 是在mac 上使用比较多的，最后导出视频就需要有付费账号了。</p><p><strong><em>Screenity，不错的地方就是开源、免费，操作简单，就一般制作视频讲解、录制足够用了！</em></strong></p><p>你可以录制屏幕、摄像头和音频，可以直接录制中音频录入，有丰富的注释功能，允许你在录制过程中添加文本、箭头、高亮、绘图。还支持模糊模式，比如你在录制视频中有些区域不想公开，比如你的密码，界面上个人隐私等信息。</p><p>录制中，你可以独立控制麦克风音频和系统音频，这对于做产品演示、技术讲解等场景非常实用。你可以选择只录制麦克风音频，或者录制系统音频，甚至可以使用“按键录音”模式，这样就可以避免背景噪音干扰，确保录音清晰可听。</p><p>比如这个图上你可以设置模糊部分，保护隐私。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250103161423107" alt="图片"></p><p>也可以在屏幕上随时进行标注，想要强调某个操作步骤？用画笔圈出重点；想要展示一个流程？加上箭头引导。支持实时绘制、添加文字，让你的录制更加生动、直观，绝对让人眼前一亮。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250103161358140" alt="图片"></p><p><strong>总结下功能，就是你看到市面上制作的录制讲解类、培训授课类的视频的功能它都支持，而且操作交互简单！</strong></p><h3 id="提供编辑，导出免费"><a href="#提供编辑，导出免费" class="headerlink" title="提供编辑，导出免费"></a>提供编辑，导出免费</h3><p>如果用过其他录屏的话，可能就知道很多在这一步要不就是让付费，要不就是高分辨率导出让冲会员，或者给你视频加上水印。。。</p><p>而这个完全不限制，代码都是开源的，就不用担心啦，视频在录制时可以自己选择4K，1080等，高清程度也不用担心，妥妥够用。</p><p>可以看右边的菜单，可以对视频进行裁剪和处理，当然如果是深加工可以进行用剪映来做处理，就录制来说这个已经完全够用了。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250103161358474.png" alt="图片"></p><h3 id="安装简单"><a href="#安装简单" class="headerlink" title="安装简单"></a>安装简单</h3><p>前面说了，这个软件是通过浏览器插件方式提供，所以安装简单，直接添加插件，就可以体验，目前支持中文语言，作者已支持多种语言，chrome插件商店直接安装，或者这个地址打开：</p><p><a href="https://chromewebstore.google.com/detail/screenity-screen-recorder/kbbdabhdfibnancpjfhlkhafgdilcnji?hl=en" target="_blank" rel="noopener">https://chromewebstore.google.com/detail/screenity-screen-recorder/kbbdabhdfibnancpjfhlkhafgdilcnji?hl=en</a></p><h3 id="写给技术人"><a href="#写给技术人" class="headerlink" title="写给技术人"></a>写给技术人</h3><p>这个开源的项目地址：</p><p><a href="https://github.com/alyssaxuu/screenity" target="_blank" rel="noopener">https://github.com/alyssaxuu/screenity</a> </p><p>技术人可以从里面看下载源码，自己也可以定制需求开发，最近也看到作者有在做链接共享，视频编辑器的一些功能，有兴趣也可以下载源码去学习~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无论你是开发者、产品经理、教师，自媒体内容创作者，在工作中总会遇到录屏的需求。可是，市面上的录屏软件大多存在功能限制，很多需要付费解锁高级功能，甚至有的还要求你充会员才能使用完整版。更别提那些软件菜单复杂、操作繁琐，让普通人看了头大的情况了…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="Tools" scheme="https://zhulg.github.io/tags/Tools/"/>
    
    <category term="录屏工具" scheme="https://zhulg.github.io/tags/录屏工具/"/>
    
  </entry>
  
  <entry>
    <title>人生建议，技术人一定要学AI大模型，时代已来！</title>
    <link href="https://zhulg.github.io/posts/94f0a6b4.html"/>
    <id>https://zhulg.github.io/posts/94f0a6b4.html</id>
    <published>2025-01-02T01:18:26.000Z</published>
    <updated>2025-01-02T01:24:39.516Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250102092023826" alt="图片"></p><p>2025年，建议所有技术人、互联网人尽快把AI学起来，用在自己的工作或者生活里，跟随技术和时代的变革。</p><p>在之前的文章中，我提到过为什么每个技术人都应该拥抱AI。而今天的重点是分享如何快速入门AI大模型技术。无论你是前端、后端工程师，还是对互联网技术感兴趣的读者，都希望能从这篇文章中获得一些有价值的启发。</p><p>先说个题外话：最近，我的文章更新频率有所降低，一方面是因为纯技术类的内容流量确实不高，读者反馈也较少；不管如何我会继续分享原创内容，给大家带来有价值的技术与成长干货分享。</p><p>回到正题，最近我重新投入到AI的学习中，这也是今天这篇文章的主旨——分享我最近一些入门的经验和知识。<strong>如果你是技术人，尤其是互联网从业者，现在就开始学习AI大模型技术，真的是给你的人生一个重要建议！</strong>（毕竟几年前感兴趣学习了机器学习和推荐相关知识，后边忙其他方向也就没继续…）也不要觉得AI底层技术很难学，关键在于怎么一点点啃理论并和项目验证结合来练。</p><p>你可能会觉得我有些夸张，但实际上，就现在技术行业特别是互联网软件行业，已经有大量的技术在持续降低门槛、人员裁减也基本成为常态。没办法新业务和技术难度都在减弱，如果还坚守在原有的阵地，可能也不是一个更好的选择，AI时代，一切发展太快，现在在去找一些基础开发、前端开发特别是网页类，<strong>这些低门槛工作完全可AI实现….技术人应该觉醒了。</strong></p><p><strong><em>是不是AI时代，所有的程序员会淘汰？绝对不是。\</em></strong></p><p>更有一些外行说所有人都跨行都来学编程？这个也不现实的，技术人也不用怕，里面还是有一定的门槛的，即便是AI时代，想跨行来做还是要有些基础知识和理论的，否则也无法结合AI来编程。</p><p>说了这么多，目的是想打消技术人过度的焦虑，然后找对方法，来提升自己。</p><h3 id="技术人怎么学？"><a href="#技术人怎么学？" class="headerlink" title="技术人怎么学？"></a>技术人怎么学？</h3><p><strong>那作为技术人，我觉得我们要做使用AI、调教AI的人，而不是被AI代替的人，用好AI这个智能工具服务更多业务。</strong></p><p>最好不要通过学习通过各种工具怎么生成图片、怎么生成视频，加一些特效，这些技能不是不可以学，作为技术人不应该重点学这些，因为这些东西门槛低，不能构成技术人的护城河。随着普及会会变成2000年左右的打字员一样的工种，技术人的核心要学怎么结合AI生产自己行业的工具，调优工具，而不是使用工具。</p><p>所以，如果上边我说的这个话你有共鸣，那我最近在重新学习的AI相关东西你应该也能领悟，我们先来思考下这几个问题。</p><h3 id="AI大模型本质是什么？"><a href="#AI大模型本质是什么？" class="headerlink" title="AI大模型本质是什么？"></a>AI大模型本质是什么？</h3><p>大模型的本质是一种统计推理的工具，通过在大规模数据上进行训练，内化并表达出广泛的知识和技能。它们具备高度的通用性和适应性，可以通过适当的调优应对多种任务，并展示出一定的类推理能力。</p><p>如果我们想做一些AI大模型的工作，这里面当然会有很多方向可做, 我觉得可以选取一个自己感兴趣的。所有这些的一切就是先从大模型的工作原理来开始。</p><p>之前写的文章，大模型里相关文章有原理的漫谈，<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356719&idx=1&sn=6df620a76eabec6d4fe8566ab33d95ad&chksm=ffec47efc89bcef95afddf24c3b8eafbcc606e3cc82f8670fa810344b1deb084afbd116fdfe5&scene=21#wechat_redirect" target="_blank" rel="noopener">AI时代：玩AI却不懂一点原理，真的靠谱吗？</a>这个也是相关的原理构成，大概原理知道后，就可以开始把组成的某一个部分开始进行理解。</p><h3 id="学习方法建议："><a href="#学习方法建议：" class="headerlink" title="学习方法建议："></a>学习方法建议：</h3><p>个人的建议，如果之前不是机器学习方向的，很可能就被概念和名词就会卡住，以为最近开始的学习来讲，不用怕，那个不懂学习那个，然后慢慢拼凑出一个概貌。学习最重要的途径，就是直接尝试做，遇到卡住的地方，再寻找方法补足技能，再尝试，如此循环。</p><p>比较核心一点，不要上来就勇猛的学各种书籍，比如机器学习、线性代数、微积分、离散数学，如果是学生阶段那没错，如果是已经工作的建议还是先把大模型相关操作和原理开始，遇到什么不清楚就查什么，然后继续，这样比直接啃基础反而快一些，但基础这些还是要啃。这些东西别指望一看就懂，一看就会，先吃一点，那个概念原理不清楚就去查，然后继续往下走，比如一些算法怎能也想不通，先跳过。然后空闲就把线性代数、离散数学、这些学一些。</p><p>方法有了，给大家分享下最近根据原理来重新学习的一些书籍和知识, 比如从transformer原理看，可能会遇到一些向量问题、机器学习问题，如果对向量不熟，可能就得查一下线性代数，如果对训练的过程不懂，就看下机器学习监督学习、无监督学习、强化学习这些概念。</p><h3 id="路线上可以从入门开始："><a href="#路线上可以从入门开始：" class="headerlink" title="路线上可以从入门开始："></a>路线上可以从入门开始：</h3><p>1.大语言模型的基础知识和常见术语和原理开始，最重要的是实际操作。</p><p>2.可以在本地环境搭建开源模型的推理环境。</p><p>3.了解下大模型的应用开发框架（ LangChain、Dify）Prompt 工程、 RAG、Agent 等大模型应用开发范式</p><p>4.大模型的训练微调、数据工程、推理优化，训练自己业务行业的大模型。</p><p>总之就是围绕怎么训练一个自己的大模型，这里面可能就会涉及上面的一系列问题，也需要补充各种理论基础，编程语言（比如对python）深度学习框架 PyTorch、TensorFlow等、分布式训练、模型调优等等。</p><p>上边提到的知识点都可以在网上找到不错的教程，推荐openai gpt和 llama 来开展学习，毕竟国内很多的大模型都也是套壳llama的。</p><h3 id="自己在看的资料："><a href="#自己在看的资料：" class="headerlink" title="自己在看的资料："></a>自己在看的资料：</h3><p>这块的资料很多，我一般不怎么推荐，因为每个人的学习方法不同，可以结合自己来，我目前在看的一些资料比如机器学习的经典可以看看周志华的机器学习，当成工具来查阅，其他的就是上边说的线性代数、离散数学，目前还没有进入深水区后边会继续分享，先推荐必学平台和书籍：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640.png" alt="图片"></p><p><a href="https://learn.deeplearning.ai/" target="_blank" rel="noopener">https://learn.deeplearning.ai/</a> 吴恩达（Andrew Ng）创办里面有很多教程</p><p><strong>另外2本必看的书籍推荐：</strong></p><p><a href="https://llmbook-zh.github.io/" target="_blank" rel="noopener">https://llmbook-zh.github.io/</a> 《大语言模型》</p><p><a href="https://zh.d2l.ai/" target="_blank" rel="noopener">https://zh.d2l.ai/</a> 《动手学深度学习》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhulg/allpic/master/640-20250102092023826&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;2025年，建议所有技术人、互联网人尽快把AI学起来，用在自己的工</summary>
      
    
    
    
    <category term="AI" scheme="https://zhulg.github.io/categories/AI/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
    <category term="AI" scheme="https://zhulg.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Studio工具部署本地AI大模型，真的太省事了</title>
    <link href="https://zhulg.github.io/posts/87fa9ee5.html"/>
    <id>https://zhulg.github.io/posts/87fa9ee5.html</id>
    <published>2025-01-01T03:12:50.000Z</published>
    <updated>2025-01-02T01:01:28.607Z</updated>
    
    <content type="html"><![CDATA[<p>普通人如何部署自己的本地大模型，如何用Studio工具部署本地AI大模型。</p><p>前面写过<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356719&idx=1&sn=6df620a76eabec6d4fe8566ab33d95ad&chksm=ffec47efc89bcef95afddf24c3b8eafbcc606e3cc82f8670fa810344b1deb084afbd116fdfe5&scene=21#wechat_redirect" target="_blank" rel="noopener">AI时代：玩AI却不懂一点原理，真的靠谱吗？</a>的基础篇，也说过这类的文章我后边会持续输出，核心目标帮助技术人、对AI感兴趣的读者，可以用一种比较轻松和漫谈的形式理解，并给大家一些学习和玩AI的方法。今天先介绍下普通人如何部署自己的本地大模型。</p><p><em>你可能会问：为什么要自己部署本地大模型？</em></p><p>我想可能有这几个原因，看看是否准确：</p><ol><li>如果你不会科学上网，是不是访问其他国外模型基本没法用，相关速度也不是快，即便科学上网，有些模型是不是还要付费订阅高级版。</li></ol><ol start="2"><li>自己是不是有些东西不想直接公开去给到大模型，害怕隐私和知识产品被大模型收集学到。</li></ol><ol start="3"><li>在某个垂直领域，是不是想训练自己的大模型，然后结合自己的产品和业务来使用。</li></ol><p>如果现在可以帮助普通人，像安装一个电脑软件一样通过简单操作，就可以运行自己的本地大模型，在自己电脑上免费使用，速度也快，也不怕自己隐私，这个是不是能满足大部分人需要了。</p><p>今天我想给大家推荐一个比 Ollama 更加清爽的工具：<strong>LM Studio（</strong>如果你还不熟悉 Ollama，它其实是一个用于安装和管理大模型的工具）， LM Studio 不仅对普通用户友好，技术人员也友好，方便地安装大模型。它提供了开发模式，让技术人员能深入了解相关参数。在用户界面方面，LM Studio 相比 Ollama 也更为出色。</p><h2 id="针对普通人用：话不多说，直接下载"><a href="#针对普通人用：话不多说，直接下载" class="headerlink" title="针对普通人用：话不多说，直接下载"></a>针对普通人用：话不多说，直接下载</h2><p>打开下载地址<a href="https://lmstudio.ai/" target="_blank" rel="noopener">https://lmstudio.ai/</a> 下载自己电脑对应操作系统，可以看到现在MAC上的用户可以安装苹果进行优化过的MLX模型。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111437107" alt="图片"></p><p>下载前看下自己电脑配置，大部分电脑是没问题，可以下载一些小的模型就好,mac的话要M1以上的电脑。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111437429" alt="图片"></p><p>下载后，就可以打开LM Studio来进行相关模型的下载，安装后可以通过左侧的搜索来找对应的模型下载，下载后可以运行对应的模型就可以直接使用了，看起来很简单。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111515167" alt="图片"></p><p>但是…</p><p>在安装后开始搜索模型时候，列表可以看到，但无法进行下载模型。这个时候不要慌，因为<a href="https://huggingface.co/" target="_blank" rel="noopener">https://huggingface.co/</a> 在国内是无法访问的。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111438109" alt="图片"></p><p>即便也有科学上网了，但是在软件内部获取模型的是通过https方式来访问的，全局代理也没有过去。</p><p><strong>怎么办，只能找国内的同步的镜像了，可以使用 hf-mirror.com，用于镜像 huggingface.co 域名，这样对应的模型就可以正常下载。</strong></p><p>我是MAC电脑，通过vscode和其他编辑器sublime text这些都可以，打开显示包内容用vscode打开文件，全局替换 huggingface.co，将 LM Studio 程序中所有使用到 huggingface.co链接的地方都搜索出来，用 hf-mirror.com 来替换，大概有5百多处（替换完后记得保存和重启软件，已经验证过没问题），如果是win用户也一样，直接找到软件安装地址，打开资源文件全局替换即可。</p><p>过了这个，就可以方便下载模型了，模型的选择可以看自己的电脑配置，其实LM studio也会根据电脑配置推荐，mac用户建议可以使用MLX的在mac上体验会更快，主要自己电脑配置要M1以上的电脑。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111530635" alt="图片"></p><p>模型下载完后，根据指引就可以直接进行加载了。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111541805" alt="图片"></p><p>模型加载后，就可以新建对话，先来进行个测试，在我箭头指示地方可以加载下载的离线模型，并开启对话。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20250101111647590" alt="图片"></p><p>这样本地的模型就可以正常运行了，你可以跟他对话，来辅助你日常相关的工作内容，这个比较适合普通人，快速搭建自己本地的大模型。</p><p>针对互联网人：想多一些理解和使用大模型</p><p>大部分互联网和技术人，这个安装和使用的过程应该很简单，在搜索的列表里也可以看到市面上各家相关的大模型，都可以去下载尝试和对比。我们在上边也看到了这么多大模型，各种参数不同的大模型，以及大模型的相关格式，这些我们是否清楚相关的概念和原理？</p><p>我们在下载模型的时候，可以看到有标识大模型参数的B，比如Llama-3.2 1B ，Llama-3.2 2B ,  这些B代表着大模型的参数，那参数到底在大模型里是什么意思？理解这些参数可以更好地理解大模型。</p><p>这些参数以Billion为单位，刚才我下载的 Llama-3.2 1B 这意味着这个模型包含大约10亿个参数，而一个参数通常是模型的权重或偏置值，这些值在训练过程中被调整以使模型能够更好地进行预测，参数越多最后相关的结果就越准确，</p><p>比如在图形识别中可能就有百万计的参数来学习图像中的不同特征，如形状、大小、纹理、颜色等等，从而实现准确识别和分类。</p><p>这些参数不仅仅是数值，也是在训练过程中学习到并自动产生，这就需要海量的数据，产生的参数代表了模型如何理解和区分不同的输入数据，根据这些上亿维度的参数来最终给出相关预测的结果。</p><p>随着训练的深入，机器人不断调整这些参数，从而变得更加聪明，能够更好地完成任务，比如识别猫和狗，或者理解人类的对话。</p><p>总结下：概念和使用</p><p>整体通俗理解下，大模型和参数，大模型就是一个聪明的大脑，它通过观察大量数据图片、文字等你想让他学的一切，根据你让他学的东西，来转化成相关的参数（也就是数字，因为机器只认数字），每个参数帮助它理解数据的不同方面，比如颜色、形状或语言的含义。根据大量的数据训练的深入，不断产生、优化、调整这些参数，大脑就越聪明，能够更好地完成给他的命令。</p><p>普通人如果想玩AI大模型，使用 LM Studio 也是个不错的选择，可以安装和尝试多个模型在自己电脑上，这样隐私和你想问的问题也就更安全，速度也更快。</p><p><strong>互联网人来说，特别技术人也可以使用他提供的本地server和 lms log stream 在命令行 来看相关模型日志。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;普通人如何部署自己的本地大模型，如何用Studio工具部署本地AI大模型。&lt;/p&gt;
&lt;p&gt;前面写过&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464356719&amp;idx=1&amp;sn=6df620</summary>
      
    
    
    
    <category term="AI" scheme="https://zhulg.github.io/categories/AI/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
    <category term="AI" scheme="https://zhulg.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>AI时代，只学1项技能，就学会提问</title>
    <link href="https://zhulg.github.io/posts/b59faea6.html"/>
    <id>https://zhulg.github.io/posts/b59faea6.html</id>
    <published>2024-12-30T23:54:59.000Z</published>
    <updated>2025-01-02T01:10:39.744Z</updated>
    
    <content type="html"><![CDATA[<p>前两天朋友私信我，问普通人在AI时代下的相关问题，他这个问题我之前也有过思考，在以往的文章里也表达过相关的观点。</p><p>他具体问题是这样的：<strong><em>现在AI这么火，我们普通人怎么学习AI，不被这个时代淘汰” 。</em></strong></p><p>坦白讲这个问题很大，但也看得出，现在很多人也感受到AI浪潮下的机遇和焦虑。他的焦虑，不知道是不是看到网上到处售卖AI学习课的缘故…（另声明，本人不售卖AI课，可免费提供粉丝AI相关帮助）</p><p>我的回答是：<strong>AI是个工具，这个工具要给你所在行业来结合起来使用。怎么结合，用你所在领域的知识、经验提问给AI，刨根问底，找出最满意的答案。</strong></p><p>之所以这样回答，是因为很多行业不同，业务和商业模式是不一样的，真正用好AI是和行业结合起来。因为AI绝不仅仅是现在市面上，教大家做个图片、制作个视频，换个声音这些操作，真正威力是大家如何使用AI来提高工作效率，渗透在自己行业里，把复杂的东西交给AI，把智能化交给AI，让自己闲下来，让企业效率也提升。</p><p>回到正题，现在信息大爆炸又有了生成式AI的协助，对于普通人，如果必须要会一种技能的话，我觉得是要学会提问，当然也可以提问给AI。不要觉得提问题简单，还要学会提问的技能？之前我也这么认为…从来没觉得提问问题还有专门的书籍（后边介绍）</p><p>为什么提问这么重要呢？</p><p>其实，不管是面对AI，还是面对生活中的各种挑战，提问能力决定了你能从这个世界获取多少有效的信息和知识。</p><p><strong>提问比告知更能解决问题</strong>，它能帮你明确方向，剖析问题，甚至打开新的思路，就像我前面提到的，AI固然强大，但如果你不会提问，给它再多的数据，它也只能给你一些表面答案，无法给出你深入的回答，况且ChatGPT有时给你的答案也是东拼西揍。</p><h3 id="能提问出好的问题，才有价值"><a href="#能提问出好的问题，才有价值" class="headerlink" title="能提问出好的问题，才有价值"></a>能提问出好的问题，才有价值</h3><p>现在信息太泛滥了，网上也有太多的文章是AI写的，有时你难以分辨真假，尽信书，不如无书。虽然，我们的知识的获取变得前所未有的容易，只要打开手机，似乎任何问题的答案都能找到。</p><p>但你有没有发现，获取答案的速度在不断提高，思考的深度却在不断下降？也许你会感叹，自己搜到了成千上万条答案，却依然解决不了实际问题。原因很简单，不是信息不够多，而是你没问对问题，没有经过思考的提问，回答的垃圾信息也就很多。</p><p>知识会贬值，但好问题永远有价值。 随着时间推移，很多知识会变得过时，但一个好的问题却可以引发持续的思考、探讨，甚至带来创新的突破。正是因为这个原因，提问能力在未来社会变得愈发重要。</p><p>想象一下，未来的你不仅需要知道如何回答问题，更需要懂得如何提出更有挑战性、更具创新性的问题，也可能是一个持续努力的方向。</p><h3 id="学会批判性思维的提问"><a href="#学会批判性思维的提问" class="headerlink" title="学会批判性思维的提问"></a>学会批判性思维的提问</h3><p><strong>学会提问，就要说到批判性思维了。</strong></p><p>学会提问，问出好的问题，首先你得有足够的知识储备和批判性思维。如果你对一个领域一无所知，这就不可能提出有深度的问题了，没有相关知识储备，你可能都不知道如何问别人，导致没有问题，有没有感同身受的感觉？</p><p><strong>知识是基础，批判性思维是方法</strong>，两者结合才能真正让你在复杂信息背景中提出好问题。</p><p>批判性思维不仅仅是质疑别人的观点，找出漏洞给别人抬杠…..而是一种系统化的思考方式。它要求你在面对信息时，能够独立分析、鉴别，得出自己的见解。而这些见解，往往就是好问题的来源。</p><p><strong>你可以提问题给大模型，他肯定不会烦你，要通过批判性思维去使用AI，提出深思熟虑的问题，结果自然会更加精准。好的提问，其实就是AI提示词（prompt）的核心部分之一。掌握好这个提问的技能，在AI时代你可能会发现自己能够学到几乎所有所需的知识。</strong></p><p>举个例子，如果你在一个技术领域已经积累了丰富的经验，那么当你面对新的挑战时，你可以提出一些基于实际需求的问题，比如：“这个技术解决方案能否提升用户体验？” ，“有哪些潜在的改进空间？”，这些问题不仅源于你的知识，更源于你对现有信息的批判性分析。当然，你在其他行业的，只要有专业经验和知识AI也不会轻易骗得了你，你用自己的专业知识尽情去提问他，直到问到准确满意的答案。</p><p><strong>怎么让自己有批判性思维的能力？</strong></p><p>个人觉得，可以这样锻炼，这个是之前网上看到的一些关于批判性思维的提问方式，比如：当你看到一件事情时候先问自己：“这是真的吗？”尝试找到支持或反驳的信息，确保自己做出的判断是基于事实而不是主观感受。这个方案对吗？有没有更好的方案？下一步如何做？等等类似的问题，锻炼自己具备这些批判思维的能力。</p><p>使用过诺基亚手机时代的话，应该就知道当年手机市场基本被诺基亚、黑莓等传统手机霸主占据。当时的手机设计围绕着物理按键和小屏幕展开，很多人认为这就是手机的未来，乔布斯采访时候有提到过，手机一定要有实体键盘吗？这也就是一种批判性思维的提问，也是触摸屏随之彻底颠覆了手机行业的创新。</p><p>还有一本比较好的书，也是个人看过的《学会提问》，可以学习提问，也可以学习英文，我买的双语版本，这本书作者是[美]尼尔·布朗(Neil Browne) ，斯图尔特·基利 ，我买的12版，推荐给大家可以看看，如下图：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241231080037649" alt="图片"></p><p>最后，AI时代下，我觉得也不要太被网上的一些信息所焦虑，要锻炼自己的批判性思维，学会提问很重要。<strong>把问题提问给AI，获取你对应行业的经验和方法，每个行业领域不一样，但提问的思维是一样的。</strong>也特别强调下，我们互联网人更要学习这种提问的思维，这也是行业创新的必备技能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前两天朋友私信我，问普通人在AI时代下的相关问题，他这个问题我之前也有过思考，在以往的文章里也表达过相关的观点。&lt;/p&gt;
&lt;p&gt;他具体问题是这样的：&lt;strong&gt;&lt;em&gt;现在AI这么火，我们普通人怎么学习AI，不被这个时代淘汰” 。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="AI" scheme="https://zhulg.github.io/categories/AI/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
    <category term="AI" scheme="https://zhulg.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>技术人在数字化转型中如何为企业赋能</title>
    <link href="https://zhulg.github.io/posts/6e29db15.html"/>
    <id>https://zhulg.github.io/posts/6e29db15.html</id>
    <published>2024-12-30T01:54:14.000Z</published>
    <updated>2024-12-30T01:56:46.792Z</updated>
    
    <content type="html"><![CDATA[<p>在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。<strong>数字化的核心是思维方式的改变，而不是简单的工具更新。</strong></p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241230095609266" alt="图片"></p><p><strong>技术驱动数字化转型的关键角色</strong></p><p>数字化转型的成败并非单纯的技术问题，但技术确实是其中不可或缺的推动者。技术的作用不仅仅是优化系统，更在于帮助企业将业务模式和技术手段紧密结合，实现降本、增效、提质，并最终反哺业务成长。</p><p>作为技术人，参与数字化转型的核心在于具备数字化思维和技术素养，同时深入了解企业的业务需求，找到技术与业务的最佳结合点。这不仅需要对现有业务的深度理解，更需要在转型过程中，通过技术手段推动企业向前发展。</p><p><strong>技术如何赋能企业数字化转型</strong></p><p>技术的价值往往体现在业务结果上。如果我们从业务结果倒推，哪些因素会影响业务的成功？这些就是技术人员需要重点关注并优化的环节。以下是我认为技术在数字化转型中能够发挥作用的几个关键领域：</p><h3 id="生产和销售链路的优化"><a href="#生产和销售链路的优化" class="headerlink" title="生产和销售链路的优化"></a>生产和销售链路的优化</h3><p>生产和销售环节往往是一个比较重要的，直接与公司的收益最相关，这种存量业务模式相对成熟且重复性较高，技术可以通过自动化、智能化手段来降低成本、提高效率。</p><p>比如，使用技术为销售人员提高客户识别、跟踪、获客、销售分析等等，生产过程中用技术改造流程，AI识别协助等，通过技术投入从而大幅提升企业的市场竞争力。</p><h3 id="产品服务价值的提升"><a href="#产品服务价值的提升" class="headerlink" title="产品服务价值的提升"></a>产品服务价值的提升</h3><p>产品服务价值链的延伸是技术发挥创新力的另一个重要领域。技术不仅能帮助企业优化现有产品，还能通过技术创新扩大服务的增量空间，通过这些服务价值给企业带来额外的收益。</p><p>比如，利用技术优化客户服务体验、通过技术投入服务潜在客户的产品、提升品牌价值，以及实现企业社会责任目标，这些都能够为企业带来长期的市场效益。</p><h3 id="企业智能化体系的建设"><a href="#企业智能化体系的建设" class="headerlink" title="企业智能化体系的建设"></a>企业智能化体系的建设</h3><p>企业智能化体系是数字化转型的核心，也是技术最为集中发挥作用的领域。从基础设施建设到云服务、大数据、人工智能的应用，技术人员不仅需要实现企业现有业务的数字化，还要建立一个智能化的生态系统，内部链接员工，外部连接客户与合作伙伴，实现真正的互联互通与数据驱动决策。</p><p>数字化转型是一个复杂而长期的过程，企业必须根据实际情况，分阶段推进智能化建设。<strong><em>技术人在这个过程中，需要明确自己的阶段性目标，确保每一步都为企业的长远发展提供技术支持。</em></strong></p><p><strong>技术人定位与价值</strong></p><p>归根结底，技术人的价值在于如何通过降本、增效、提质和反哺来助力企业成长。</p><p>降本增效方面，技术通过合理的资源配置和数据化管理，帮助企业优化决策。</p><p>在提升质量方面，技术可以通过数据分析、产品检测等手段，确保业务的高效运行。</p><p>而反哺业务的关键，则在于如何利用大数据和AI等先进技术手段，从沉淀的数据中提取洞察，助力业务持续增长。</p><p>数字化转型是一个复杂的过程，也是企业寻求新发展的必经之路，技术人也应当在这个过程中找到自己的定位，发挥最大价值，推动企业在新时代中实现新的突破。</p><p>以上讲的都是漫谈的形式，由于时间问题并没有详细展开来讲。有数字化方面感兴趣朋友可以评论发表你的思考、看法，也可私下欢迎交流~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。&lt;strong&gt;数字化的核心是思维方式的改变，而不是简单的工具更新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubu</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="数字化" scheme="https://zhulg.github.io/tags/数字化/"/>
    
  </entry>
  
  <entry>
    <title>学python，拥抱ai：吴恩达Python初级课让你轻松上手编程</title>
    <link href="https://zhulg.github.io/posts/5d7e12b8.html"/>
    <id>https://zhulg.github.io/posts/5d7e12b8.html</id>
    <published>2024-12-28T07:27:37.000Z</published>
    <updated>2025-01-02T02:23:25.809Z</updated>
    
    <content type="html"><![CDATA[<p>在近年来AI应用的爆发下，一跃冲到了排行榜的首位。随着AI技术的快速进步，加上ChatGPT等智能工具的推动，编程正逐步迈向“自然语言编程”的新时代，门槛越来越低，人人皆可成为开发者。</p><p>今天，我花了一小时左右看了吴恩达老师的《AI Python for Beginners》课程（地址在文末），<strong>看下来非常推荐给没有编程背景的职场人士、学生，以及会计、金融、行政等领域的从业者来学习了解python。尽管是初级课程，也比较适合程序员来学习吴恩达老师的深入浅出教学风格。</strong></p><p>吴恩达老师是斯坦福大学的教授，还是全球人工智能领域的领军人物。他曾担任Google大脑的负责人，并在百度担任过首席科学家，拥有丰富的行业经验。</p><h2 id="课程基础有趣"><a href="#课程基础有趣" class="headerlink" title="课程基础有趣"></a>课程基础有趣</h2><p>视频里吴恩达老师也讲了他的观点，为什么其他行业人也建议学，十年前可能不建议其他行业来学，而现在因为有了生成式AI，有了助手，编程更简单了。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228153237145" alt="图片"></p><p>非常欣赏这种大师级的人来做一些看似基础的课程，也往往能把一些基础的课，生动的讲给非计算机行业的人这个才是厉害的。视频里先从什么是计算机编程来讲起，并结合日常的例子来说明。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228153217676" alt="图片"></p><p><em>题外话，你可能看到我截图的视频是有中文字幕的，这个建议安装个沉浸式翻译插件就好了，适合英语不好的自动就翻译了（但我建议听原版讲解）。</em></p><p>视频里也重点提到在AI的协助下可以把每个行业要做的事情步骤告诉AI，通过生成代码，来提高自己的工作效率。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228153218235" alt="图片"></p><p>*<br>*</p><h2 id="AI-配合教学"><a href="#AI-配合教学" class="headerlink" title="AI 配合教学"></a>AI 配合教学</h2><p>视频在讲解能了解Python 基础知识，不仅能快速了解编程概念，python里的变量、函数、循环、数据结构基础语法，能快速知道编程最核心基础是什么样子的。</p><p>通过和大模型的结合调用，可以了解一些基本的调用关系，这样通过python的简单语法代码来调用LLM，也就能搞清楚AI 智能体（ai agent）是在说什么。<strong>比如下图这个，其实就是通过设置变量后，调用LLM来生产结果，这样多个调用过程结合起来就是AI agent.</strong></p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228153250465" alt="图片"></p><p>如果是非计算机行业，可以慢慢看，每一步骤都有一些可执行的操作，跟着视频来做。</p><p>比如下边这个图，中间其实就是一个编辑器，你可以直接修改代码，然后点击运行，这个里面也配置了生成式的chat工具，可以通过对话来指引你程序错误的地方。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228153218758" alt="图片"></p><p>写在最后</p><p>整体看这个视频教程非常适合新手来学习，不仅了解python的最最基础语法，也能体验和LLM来一起结合调用的体验。</p><p>当然这个虽然是大师的课程，如果想进一步学习的话，还是建议针对系统学习python开发语言，python入门简单，通过了解基础语法和生成式AI的结合，你至少要能看懂代码，然后让chatgpt来进行协助，这样很快一款真正的产品才能快速诞生。</p><p><strong>这个课程地址：</strong></p><p><a href="https://learn.deeplearning.ai/courses/ai-python-for-beginners" target="_blank" rel="noopener">https://learn.deeplearning.ai/courses/ai-python-for-beginners</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在近年来AI应用的爆发下，一跃冲到了排行榜的首位。随着AI技术的快速进步，加上ChatGPT等智能工具的推动，编程正逐步迈向“自然语言编程”的新时代，门槛越来越低，人人皆可成为开发者。&lt;/p&gt;
&lt;p&gt;今天，我花了一小时左右看了吴恩达老师的《AI Python for Beg</summary>
      
    
    
    
    <category term="Python" scheme="https://zhulg.github.io/categories/Python/"/>
    
    
    <category term="AI" scheme="https://zhulg.github.io/tags/AI/"/>
    
    <category term="python" scheme="https://zhulg.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>互联网小生意平台推荐，思考适合你的副业机会</title>
    <link href="https://zhulg.github.io/posts/e3b99003.html"/>
    <id>https://zhulg.github.io/posts/e3b99003.html</id>
    <published>2024-12-27T23:18:43.000Z</published>
    <updated>2024-12-27T23:24:19.026Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写了一篇关于互联网人尽早找到自己一人能做的小生意，<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356058&idx=1&sn=4684f83f6a948c31eed382f2ccbaefec&chksm=ffec485ac89bc14ca75e6b546adc65c05d610d842b5435553863cfefac1066862d79ac7c5ad6&scene=21#wechat_redirect" target="_blank" rel="noopener">尽早觉醒：找到自己一人能做的互联网生意</a> 收到不少读者私信和评论关于小生意怎么做，能感觉到大家对于如何开启小生意及如何利用好互联网平台这块充满兴趣。</p><p>尤其是针对设计、技术等互联网行业同学，这块的读者今天重点介绍一些相关副业平台，可以从这些平台上做一些自己的小生意赚钱，或者从这些平台需求痛点上能否给你带来思考，也看看这些外面的世界和平台能否给你带来一些需求灵感，找到自己的一些小生意。</p><p><strong>通过这些小生意平台，可以尝试增加收入，更重要的是观察思考找到适合自己的发展方向和副业机会。</strong></p><p>先看一些设计类的平台吧，这些平台好的设计都能给我们生活中带来一些色彩（我知道这些设计类平台，是因为有时候我也会看下好的设计和配色如何用技术在应用里呈现），如果设计类同学还知道更多平台，可以补充到评论里，分享使人进步。</p><h1 id="设计类平台"><a href="#设计类平台" class="headerlink" title="设计类平台"></a>设计类平台</h1><h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a>Dribbble</h2><p>这个在设计圈应该都知道，通过展示作品集吸引客户，可以自己设计挂上该平台，可接单赚钱，适合平面设计、UI/UX设计等领域。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072233598" alt="图片"></p><p>官方地址: <a href="https://dribbble.com" target="_blank" rel="noopener">https://dribbble.com</a></p><p>99designs</p><p>设计师可以参与设计比赛，可以参加比赛获取奖金，也可以直接接设计订单，logo设计，食品包装、书籍封面等等。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072019669" alt="图片"></p><p>官方地址: <a href="https://99designs.com" target="_blank" rel="noopener">https://99designs.com</a></p><h2 id="Behance"><a href="#Behance" class="headerlink" title="Behance"></a>Behance</h2><p>全球设计师展示作品集的平台，也提供工作机会的板块，网站的愿景也写的比较明确，帮助招聘人员和创作者通过创意展示来找到彼此联系。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072019913" alt="图片"></p><p>官方地址: <a href="https://www.behance.net" target="_blank" rel="noopener">https://www.behance.net</a></p><h2 id="Creative-Market"><a href="#Creative-Market" class="headerlink" title="Creative Market"></a>Creative Market</h2><p>这个网站比较出名设计素材交易平台，适合设计师可以在这里出售自己设计的数字产品，如字体、图标、网站模板，虚拟商品，可以直接上架售卖。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072306096" alt="图片"></p><p>官方地址: <a href="https://creativemarket.com" target="_blank" rel="noopener">https://creativemarket.com</a></p><p><em>国内的这类平台，有站酷 、花瓣网、稿定网、包图等，整体上比较有浓浓的商业气息，个人不是很喜欢，有兴趣的设计师可以自行对比。</em></p><h1 id="技术类平台"><a href="#技术类平台" class="headerlink" title="技术类平台"></a>技术类平台</h1><p>建议首先尝试国外的一些平台，尤其是对于技术人员来说，国外的机会相对更多，回报也更可观。相比之下，国内的平台竞争激烈，出价较低，可能并不值得你投入过多的时间和精力放在互卷上，还有可能缺乏创新的东西上。</p><h2 id="GitHub-Sponsors"><a href="#GitHub-Sponsors" class="headerlink" title="GitHub Sponsors"></a>GitHub Sponsors</h2><p>开源项目资助平台，说白了就说通过自己维护开源项目来接受大赏，维护开源项目可以是代码，也可以是文档等，而且目前平台没有抽成，100%给参与的维护者，需要开通sponsors，参与开源项目维护。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072020397" alt="图片"></p><p>官方地址: <a href="https://github.com/sponsors" target="_blank" rel="noopener">https://github.com/sponsors</a></p><h2 id="Toptal"><a href="#Toptal" class="headerlink" title="Toptal"></a>Toptal</h2><p>这个平台适合比较有经验的程序员，从网站介绍也可以看到，当然给的薪资也不低，他的核心理念就是提供专业领域的顶级自由职业者，除了技术，也有设计，金融类项目。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072331776" alt="图片"></p><p>官方地址: <a href="https://www.toptal.com" target="_blank" rel="noopener">https://www.toptal.com</a></p><h2 id="Upwork"><a href="#Upwork" class="headerlink" title="Upwork"></a>Upwork</h2><p>如同网站口号，“How work should work” 他是美国的一个自由职业平台号称全球第一，说白了外包平台，提供有设计、开发、市场营销等，可以在这个上边找到对应的开发需求，比如app开发国内已经趋于饱和下，在全球来接单显然更有优势一些。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072020899" alt="图片"></p><p>官方地址：<a href="https://www.upwork.com/" target="_blank" rel="noopener">https://www.upwork.com/</a></p><h2 id="Freelancer"><a href="#Freelancer" class="headerlink" title="Freelancer"></a>Freelancer</h2><p>规模上和Upwork不分上下，也是为自由工作者提供工作机会，还是外包服务平台，除了技术类，也有其他设计、工程类，科学、营销等，程序员的话可以提供定制软件开发、网站构建、应用开发等接全球各地的项目，其中技术类也有前后端项目，具体可以根据自己技术来找工作。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072348668" alt="图片"></p><p>官方地址：<a href="https://www.freelancer.com/" target="_blank" rel="noopener">https://www.freelancer.com/</a></p><h2 id="Stack-Overflow-Jobs"><a href="#Stack-Overflow-Jobs" class="headerlink" title="Stack Overflow Jobs"></a>Stack Overflow Jobs</h2><p>这个比较适合程序员来通过Stack Overflow上的工作板块寻找远程兼职工作，这个因为可以面向全球，你可以有选择有目标来进行投递，保持技术连续性，另外也发现一下国外都在做什么应用，我随便搜索了下android这个岗位，发现也是有不少的。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072021432" alt="图片"></p><p><em>也说下国内的相关平台吧，猿急送，程序员可以通过接单为客户提供定制开发，也可以通过查看需求自己是否来接单，猪八戒网，里面比较多各种门类，整体来说就是有人发需求有人来接，整体来看就是我之前讲的内外套路外行，互相糊弄的居多。</em></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>介绍这些小生意平台，不是鼓励大家都来接单赚钱，我觉得更多是帮助大家打开一些思路和点子，更好的结合自己优势和兴趣发现生意。</p><p><strong>把自己的一份时间和付出服务于更多的人，同时给自己带来盈利</strong>。之前有提过知识付费，现在也有一些这样的平台，也适合非互联网行业的人，大家都可以直接参与进去售卖所在行业知识和经验。</p><p>希望以上这些小平台能给大家带来一些观察和思考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天写了一篇关于互联网人尽早找到自己一人能做的小生意，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464356058&amp;idx=1&amp;sn=4684f83f6a948c31eed382f2ccb</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="互联网副业" scheme="https://zhulg.github.io/tags/互联网副业/"/>
    
  </entry>
  
  <entry>
    <title>互联网人必备！draw.io：免费好用的作图神器</title>
    <link href="https://zhulg.github.io/posts/4b03ee24.html"/>
    <id>https://zhulg.github.io/posts/4b03ee24.html</id>
    <published>2024-12-27T03:43:07.000Z</published>
    <updated>2024-12-27T23:13:55.725Z</updated>
    
    <content type="html"><![CDATA[<p>今天要给大家推荐一个超级好用的作图神器——<strong>draw.io</strong>，特别适合各行各业，尤其是我们互联网行业的朋友们，简直是作图的必备工具。</p><p>为什么说它是神器？因为draw.io支持在线使用，不需要安装繁琐的软件，打开网页就能直接使用。如果你更喜欢在本地操作，它也提供了PC安装包。支持多种存储方式、可以本地导入导出，轻松导出为图片或其他文件格式。</p><p><em>最重要的一点，*</em>称之为神器的核心原因就是：功能强大、操作便捷，而且完全免费，无任何套路！***</p><p>对互联网人来说，无论是制作产品原型图、流程图、架构图，还是项目管理图，draw.io 都不在话下，轻松拿捏。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114611891.gif" alt="图片"></p><h2 id="1-下载或直接打开"><a href="#1-下载或直接打开" class="headerlink" title="1. 下载或直接打开"></a>1. 下载或直接打开</h2><p>在线使用直接打开网站<a href="https://draw.io/" target="_blank" rel="noopener">https://draw.io/</a> 即可，如果想把自己历史作图文件进行保存，建议和github一起来结合（我是一直这么使用），这样源文件也进行了保存。当然也支持多种存储方式。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114117602-20241227114612083" alt="图片"></p><p>如果想直接安装软件在自己的电脑上，去<a href="https://www.drawio.com/" target="_blank" rel="noopener">https://www.drawio.com/</a> 下载即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gCwibMtn41zOFqhI6m73wjiaN1HzGeGvl6DPLBQMvR4tLTwMrNRdLY9DPYQhwNRNvtQ6oJ6PrnjTW1iaiaDq8IYs0Q/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>你会从下载地址看到有windows、Mac版本，选择自己要下载的安装即可。</p><p>如果你想学习下构建这个桌面软件的源代码，也是可以的。从这个工程下可以链接到draw.io的代码（适合技术人员关注）</p><ol start="2"><li>轻松上手</li></ol><p>如果你喜欢使用本地版本，安装后打开可以设置语言，方便英语不熟悉的同学使用。下面这个图可以设置对应的语言选择。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118163-20241227114613565" alt="图片"></p><p>打开后可以创建作图，可以建立空白工程做图，也可以从模板里进行选择。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118351-20241227114613748" alt="图片"></p><p>以时序图为例，可以轻松拖拽，傻瓜式操作，到这你可能已经能看到很多比较漂亮的图，之前网上可能见到过的，这里面都有配图和操作。</p><p>下面这个图的效果是不是在一些技术博客经常看到，你可能不知道怎么做的，有这个工具你也就知道怎么做了。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118541-20241227114613988" alt="图片"></p><p>也提供有丰富的多种元素供添加和使用：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114614292" alt="图片"></p><ol start="3"><li>支持多种导出</li></ol><p>做好图后直接选择导出方式，可以把需要的图导到本地，导出的同时可以选择必要的设置，使导出的图更加漂亮一些。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gCwibMtn41zOibmicsRz1NEic8hV3XXm43AHkwEBLte78h6hv6LcjAYPGbTicibmpkVqseab98JEkpxBNUAopIIseCxQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>导出的一些效果图，这些是我之前的一些老图（看效果即可不用关注内容）</strong></p><p>技术细节时序图：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114614819" alt="图片"></p><p>商务类图：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114119353" alt="图片"></p>]]></content>
    
    
    <summary type="html">推荐一款互联网人必备的免费作图工具——draw.io，支持在线使用和多种存储方式，适合制作流程图、架构图等。</summary>
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="作图工具" scheme="https://zhulg.github.io/tags/作图工具/"/>
    
  </entry>
  
  <entry>
    <title>从0到1，用Rust轻松制作电子书</title>
    <link href="https://zhulg.github.io/posts/4f00c682.html"/>
    <id>https://zhulg.github.io/posts/4f00c682.html</id>
    <published>2024-12-26T04:57:17.000Z</published>
    <updated>2025-01-02T02:19:49.785Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356238&idx=1&sn=d22e9c4604c35adb11c714ff8754f45b&chksm=ffec490ec89bc018245032ac8b6cd2b5168f0d28e019123707e542836e6bb744b425891256cd&scene=21#wechat_redirect" target="_blank" rel="noopener">经济下行的时候，这些行业可能会更好</a>》中，我简单提到过用 Rust 做电子书，有收到读者朋友的私信，问怎么做电子书。今天正好有空，就来快速为大家做一个详细的介绍。  </p><p>制作电子书其实用途广泛，不仅可以用于技术文档、用户手册、教程等，还可以应用于文学创作。如果你有想法写小说或者做知识付费，电子书也是一个不错的切入点。特别是知识付费领域，通过小范围试水电子书，收集读者反馈，进一步打磨内容，最后也可以出版成书。</p><p>好了，有点扯远了，我们重点先说下怎么用Rust做电子书。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>我们准备用Rust来创建电子书，首先，需要安装有Rust的环境，Rust环境安装也比较简单打开官方地址，复制安装命令安装即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &apos;=https&apos; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><p>其次，需要对Markdown语法了解，如果不了解的可以看下，强烈推荐所有人来学。很多精美的排版和插图都可以通过md语法来实现，现在更有md的编辑器，稍微了解配合编辑器就能如虎添翼了。</p><p>如果有不熟悉markdown可以到这个网站来学习了解下，<a href="https://www.markdownguide.org/" target="_blank" rel="noopener">https://www.markdownguide.org/</a> ，也可以其他中文网站了解。</p><h2 id="2-安装使用"><a href="#2-安装使用" class="headerlink" title="2. 安装使用"></a>2. 安装使用</h2><p><strong>介绍下我们做电子书的主角mdBook，一款由rust实现的开源软件</strong>，可以进行文档生成，搜索，语法高亮，生产的电子书可以支持在PC、和移动设备打开使用。</p><p>通过cargo来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install mdbook</span><br></pre></td></tr></table></figure><p>安装成功，可以进行创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdbook init my-first-book</span><br></pre></td></tr></table></figure><p>创建过程中可以起名字，创建完成后到该文件目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-first-book</span><br><span class="line">mdbook serve --open</span><br></pre></td></tr></table></figure><p>打开地址<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> ，可以看到创建的电子书模板已经打开了，尽管内容还是空的，但电子书的结构已经有了，左边导航，右边文章内容，以及搜索框。</p><p>剩下就是我们写电子书的内容了。</p><h2 id="3-写电子书内容"><a href="#3-写电子书内容" class="headerlink" title="3. 写电子书内容"></a>3. 写电子书内容</h2><p>在创建的电子书工程下，会看到src文件目录、book.toml配置文件、book目录，我们先关注电子书的内容src目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── SUMMARY.md</span><br><span class="line">└── chapter_1.md</span><br></pre></td></tr></table></figure><p>SUMMARY.md 里打开可以看到就是左侧的导航配置，比如对应的章节配置在这个文件里，chapter_1.md就是对应的章节内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Summary</span><br><span class="line">- [Chapter 1](./chapter_1.md)</span><br></pre></td></tr></table></figure><p>可以对chapter_1.md进行内容写作，就可以形成对应的电子书的内容了。</p><p>比如这个我复制了个内容，修改了章节命名，然后重新刷新即可看到内容。</p><h2 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h2><p>电子书制作完后，编译后会发现在book的目录下会有编译好的文件，可以通过GitHub Pages上这样完全可以免费，也可以支持远程别人打开和阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464356238&amp;idx=1&amp;sn=d22e9c4604c35adb11c714ff8754f45b&amp;chksm=ffec490ec</summary>
      
    
    
    
    <category term="Rust" scheme="https://zhulg.github.io/categories/Rust/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人必修课：锻炼自己的商业思维</title>
    <link href="https://zhulg.github.io/posts/adbd9bd2.html"/>
    <id>https://zhulg.github.io/posts/adbd9bd2.html</id>
    <published>2024-12-07T03:22:32.000Z</published>
    <updated>2024-12-07T03:27:36.128Z</updated>
    
    <content type="html"><![CDATA[<p>在技术人职业生涯中，前期大家一直崇拜技术，视技术为自己绝对的核心竞争力。这个没错，也是技术人的本分，但是技术人也要锻炼自己的商业思维。</p><p>“商业思维通常指在经营管理过程中，以市场作导向，以客户需求为中心，将资源、产品或服务转化为可持续商业价值的方法的能力”。</p><h2 id="那技术人的商业思维是什么？"><a href="#那技术人的商业思维是什么？" class="headerlink" title="那技术人的商业思维是什么？"></a><strong>那技术人的商业思维是什么？</strong></h2><p>直白点来讲，就是能看透并利用技术产生商业价值，让技术从幕后到前台，用技术赚到钱的思维能力。当然这个前提是合法合规，不能歪门邪道，否则不叫商业思维，叫非法谋取利益。</p><p>为什么技术人要锻炼商业思维呢，因为利用好自身技术并结合商业思维更能理解赚钱路子。具备商业思维不仅能帮助你理解好公司产品和业务模式。对后续自己创业或者开启副业都有帮助。</p><p>有没有遇到过这种情况，想必一定有的，比如：刚搭建好的系统架构和模块设计，突然业务需求或者市场模式发生了变化，不得不改造及扩展。有时改动还比较大，想想为什么，市场的本质就是变化和波动，我们设计的模块是不是符合真实业务和商业模式？早期做打车平台设计只有出租车，后边有了快车、专车，豪华车等等车型运营，技术平台设计也就要扩展适配运营。这些其实不仅仅是技术上的问题，更是你对业务和商业思维的缺乏思考，没有一定的商业思维和意识，技术设计也会存在局限性。</p><p>在公司还有一些试错成本，那如果自己出来创业呢，只有技术，没有商业思维，那创业想必也是必死无疑。</p><h2 id="从小事上培养商业思维"><a href="#从小事上培养商业思维" class="headerlink" title="从小事上培养商业思维"></a>从小事上培养商业思维</h2><p>我们做技术的很容易陷入到技术和代码的“死胡同”，埋头苦干却缺少抬头看路的情况，同样商业思维的锻炼应该是从身边的小事或者从自己实现的产品里多一些观察和思考，刻意锻炼自己的商业思维敏感度。</p><p>举个例子，吃饭时候观察下那些生意火爆的店都常常存在排队，那他们火的原因是什么，好吃？一定有这个因素，但肯定还有其他的，地段、定价、口碑，营销、服务等等，能否分析和总结出这些小店的成功因素。你去理发店可能会更有感触，理发店核心是做出漂亮的发型，同样除核心竞争力还有哪些因素促使一家店经久不衰，这些背后因素能否发现或者正确找出成功关键点，逐渐培养自己对商业机会的敏感度。</p><p>当前短视频和直播带货也比较热，有没有想过，这背后是不是有一整套的商业逻辑和生态，在如此火热的时代下，作为技术人，你有哪些思考。</p><p>自己也加入视频创作和直播？不反对，但是你可能也知道现在做的成功概率及能否做的起来。</p><p>用技术人的商业思维，应该是如何服务这些群体。</p><p>就犹如刘强东先生之前说过，大部分中国人赚钱方式别人怎么做，我也来跟。记得他举了个”犹太人开加油站的故事“，别人是通过有了一家加油站后，做了加油站旁边的配套项目，而不是我们看到加油站赚钱，就跟风在旁边都开起加油站来。。。</p><p>如果我们不思考，不具备一定商业思维，直接跟进，那就和上边例子一样，况且自己不擅长也肯定赚不到钱。</p><p>那我们技术人正确思维和做法是利用技术优势做为他们生态提供者参与进来，做配套项目，做衍生产品，这样你前期独一份的时候就能快速赚到钱。</p><h2 id="从实际工作中切入锻炼"><a href="#从实际工作中切入锻炼" class="headerlink" title="从实际工作中切入锻炼"></a>从实际工作中切入锻炼</h2><p>从自己的工作场景和项目中找到切入点，锻炼自己商业思维，先从小的、具体的业务问题入手。比如，想想你所参与的项目，它服务的目的是什么？用户需要什么？公司是怎么靠这个项目盈利的？需求背后原因是什么？</p><p>这些问题看似基础，但往往被我们技术人所忽视，当你开始思考这些问题的时候，其实就是在培养商业思维了。</p><p>理解公司如何运作，客户为什么愿意为你的技术方案买单，是商业思维的第一步。通过参与项目需求讨论，多和产品、市场同事沟通，逐渐摸清业务背后的逻辑。这里要啰嗦下，我们技术人有时不愿意和市场或者销售来做更多沟通大家语言多少有些不理解，但技术人想让自己提升，想锻炼商业思维，就要多接触市场这些人，多聊对自己打开技术外的思维非常重要。</p><p>如果上边能做到理解和领悟，那你在实施中通过让技术和商业目标结合就会更加合理和自然，你可以提出改进建议，不仅仅是基于技术上的提升，还要考虑这个改进能不能为公司带来更多收益或降低成本。或者，在开发新功能时，提前想到客户需求的变化，设计更灵活、可扩展的架构。这些都是用技术去服务商业的实际例子，这些做对了公司不仅降本增效，自己的商业思维和技术结合的能力也就大大提升。</p><h2 id="技术和商业双向奔赴"><a href="#技术和商业双向奔赴" class="headerlink" title="技术和商业双向奔赴"></a>技术和商业双向奔赴</h2><p>作为技术人，其实商业思维和技术能力是相辅相成的。你会发现，当你具备了商业思维之后，原本那些看似枯燥的项目、代码实现逻辑，他们背后都藏着商业逻辑和运营管理因素。</p><p>有了商业思维，做技术决策时就避免埋头苦干，而是能更清楚地知道，为什么要这么设计？为什么要花这么多时间优化？项目的商业价值在哪里？钱到底是怎么赚的？这些问题不再模糊，而是变得具体起来。</p><p>平日里还要多跟非技术背景的人交流，这点也很重要。他们的想法往往能帮你跳出技术的框架，拓宽你的视野。无论你是准备自己创业，还是继续在公司深耕，商业思维加上技术的组合拳，能让你在任何情况下都游刃有余。</p><p>如果你一直关注自己商业思维锻炼，你会慢慢发现一些商机，也就知道如何用技术以及该不该把它来实现，这样一来，你的职业选择和发展空间也会越来越广阔。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在技术人职业生涯中，前期大家一直崇拜技术，视技术为自己绝对的核心竞争力。这个没错，也是技术人的本分，但是技术人也要锻炼自己的商业思维。&lt;/p&gt;
&lt;p&gt;“商业思维通常指在经营管理过程中，以市场作导向，以客户需求为中心，将资源、产品或服务转化为可持续商业价值的方法的能力”。&lt;/</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>后端工程师，必须掌握的8大技能</title>
    <link href="https://zhulg.github.io/posts/f82f20d4.html"/>
    <id>https://zhulg.github.io/posts/f82f20d4.html</id>
    <published>2024-12-02T11:11:05.000Z</published>
    <updated>2024-12-02T11:36:20.010Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章介绍过全栈工程师的练就之路，《<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464355691&idx=1&sn=4f844933f98a26df0992a16f30af0a6e&chksm=ffec4bebc89bc2fde8d84f77d52a00e17c819cf5690add8433c658f39ee1b5da223fdad3766b&scene=21#wechat_redirect" title="全栈工程师，练就之路：如何学，如何做" target="_blank" rel="noopener">全栈工程师，练就之路：如何学，如何做</a>》今天展开来看下，最近几年比较流行的后端开发技能，也看看还有哪些没有掌握的后端技能。</p><h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1. 编程语言"></a>1. 编程语言</h3><p>适合后端开发的编程语言，也是目前比较应用广泛的， <strong>Java、GO、Python、Rust 我推荐这4种，</strong>但也有node.js 和PHP、Kotlin这些（毕竟今天我主要讲主流和流行的后端技能）也有一些应用在使用，目前占比不大。</p><p>java后端开发尤其是Spring框架下还是被大量应用所使用，GO因其高并发性能，在微服务和高并发场景下广泛使用，python不仅在脚本使用，大量AI和机器学习类也广泛应用。rust在后端方面以安全和高性能著称，在后端、区块链应用也有巨大优势。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_1.png?raw=true" alt></p><p>2. API相关开发</p><p>具备能对接口设计和开发的能力，能对业务进行抽象定义，把业务转为为数据结构和表结构的设计能力。</p><p><strong>RESTful API ,设计清晰、易扩展的API接口</strong></p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_2.jpeg?raw=true" alt></p><p><strong>gRPC：适合高性能微服务通信，是开源的远程过程调用（RPC）框架</strong></p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_3.png?raw=true" alt></p><p><strong>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。</strong></p><h3 id="3-数据库相关技能"><a href="#3-数据库相关技能" class="headerlink" title="3. 数据库相关技能"></a>3. 数据库相关技能</h3><p><strong>关系型数据库</strong>：肯定是MySQL、以及PostgreSQL、Oracle等关系型数据库，具备理解SQL语法、查询优化和数据库设计核心技能。<strong>其他的NoSQL数据库</strong>：如MongoDB、Redis、Cassandra等，适合处理大规模数据、高并发读写。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_4.jpeg?raw=true" alt></p><h3 id="4-框架化应用技能"><a href="#4-框架化应用技能" class="headerlink" title="4. 框架化应用技能"></a>4. 框架化应用技能</h3><ul><li><p>• Spring Boot/Cloud (Java)：用于快速构建独立、生产相关Spring的应用，应用最广泛的框架</p></li><li><p>• Django/Flask (Python)：一个全功能和轻量级的Web框架，适用于python开发</p></li><li><p>• Express (Node.js)：简洁且强大的Web框架，也比较常用</p></li></ul><ul><li><img src="https://github.com/zhulg/allpic/blob/master/server_2024_5.jpeg?raw=true" alt></li></ul><h3 id="5-消息队列系统技能"><a href="#5-消息队列系统技能" class="headerlink" title="5. 消息队列系统技能"></a>5. 消息队列系统技能</h3><p><strong>RabbitMQ</strong> 其设计偏向于消息传递的可靠性和灵活性，RabbitMQ 以队列为中心，消息通过交换器（Exchange）发送到不同的队列。</p><p><strong>Kafka</strong> 一个分布式流式处理平台，基于Zookeeper协调的分布式消息系统，可以实时发布、订阅、存储和处理数据流，适用于大规模数据处理和日志管理。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_6.png?raw=true" alt></p><h3 id="6-docker容器化技术"><a href="#6-docker容器化技术" class="headerlink" title="6.docker容器化技术"></a>6.docker容器化技术</h3><p>Docker 容器化技术，能够创建、管理和部署容器化应用，简化了应用环境配置问题，打包成为镜像。</p><p>Kubernetes 用于大规模容器编排和管理</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_7.jpeg?raw=true" alt></p><h3 id="7-代码管理和自动化部署类"><a href="#7-代码管理和自动化部署类" class="headerlink" title="7.代码管理和自动化部署类"></a>7.代码管理和自动化部署类</h3><p>Git命令后操作、GitHub、GitLab 的使用。</p><p>CI/CD工具,如Jenkins、GitLab CI，能够持续集成与交付。</p><p>自动化部署类，熟悉AWS、Azure、Google Cloud等云服务，这块其实有部分是和运维同事重叠的技术能力，了解即可。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_8.jpeg?raw=true" alt></p><h3 id="8-架构、性能、安全类技能"><a href="#8-架构、性能、安全类技能" class="headerlink" title="8.架构、性能、安全类技能"></a>8.架构、性能、安全类技能</h3><p>这类技能要根据具体的编程语言、应用规模相结合在整体来做，并在日常中学习和锻炼的技能。</p><p>架构类，如何架构微服务、单体架构的区别与使用场景，具体开发中的设计模式应用，架构原则的遵循。</p><p>应用中性能的调优，数据库查询和缓存的优化，对组件安全方面合理选择，语言和框架安全类的日常关注、能从整体考虑系统的扩展、健壮性的掌控能力。</p><p>其他一些技能在后端开发中，日常问题的分析和定位能力，如何通过问题发现架构和设计的本质缺陷。</p><p>如何优化分层和系统设计降低应用耦合，如何通过上线前合理规划架构和设计，上线后的日志监测和报警、服务的自恢复、降级策略的制定。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>后端的技能也在不停迭代和更新，熟练运用现在比较流行的后端技术，清楚知道使用场景，并保持学习，从整体上来用合适的技术选择结合业务场景来确保后端服务的稳定，并保持自己在后端技术迭代升级。</p><p><strong><em>PS: 也欢迎大家评论和交流~ 更多文章也可关注微信公号：良技漫谈</em></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章介绍过全栈工程师的练就之路，《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464355691&amp;idx=1&amp;sn=4f844933f98a26df0992a16f30af0a6e&amp;c</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>失业潮下，互联网人如何面对，给自己留好后路</title>
    <link href="https://zhulg.github.io/posts/80da3ca2.html"/>
    <id>https://zhulg.github.io/posts/80da3ca2.html</id>
    <published>2024-12-02T01:49:36.000Z</published>
    <updated>2024-12-02T01:51:17.623Z</updated>
    
    <content type="html"><![CDATA[<p>在全球经济下行的大背景下，失业潮正以不可阻挡的势头席卷而来，任何行业都很难幸免。</p><p>互联网行业，曾经风光无限，如今也显得步履维艰。随着基建生态成熟，资本退潮，市场存量博弈愈发激烈，裁员的阴影也笼罩着一线大厂。从阿里的“瘦身”到腾讯的“断臂”，一波波暗流涌动的裁员潮已在行业内频繁上演，小公司的日子就更不必多言。</p><p>面对这样的现实，越来越多的互联网人被迫直面失业，身边的同事、朋友大家也不把失业当成需要隐瞒的秘密，而是大家互相调侃，并能冷静应对的常态。</p><p><strong>当失业情况成为常态，我们该如何面对、以及如何为未来做好准备，给自己留好退路。</strong></p><h2 id="冷静面对提前规划"><a href="#冷静面对提前规划" class="headerlink" title="冷静面对提前规划"></a>冷静面对提前规划</h2><p>先看一组网上相关数据情况，作为参考。仅在2023以来，阿里巴巴、腾讯、百度，字节、京东企业的裁员人数已超过数万，在有一些中小互联网，数据可能比这个要多。这里面无论你是资深技术专家还是初入职场的新人，可能都无法置身事外，这个曾经风光无限的行业，如今正遭遇前所未有的寒冬。</p><p>失业，特别是突如其来的裁员，往往让人猝不及防，在面对这场互联网行业的“生存游戏”时，最重要的是保持冷静，接受变化。互联网行业的周期性波动早已不是新闻，失业不过是其中的一部分。与其一味抗拒，不如学会接受现实，并将其视为一次重新出发的机会。</p><p>提前规划经济生活确保稳定，避免高负债，谨慎对待信用卡、贷款等消费方式，确保自己有足够的紧急储蓄，以应对未来几个月的生活支出，让自己保持不慌 ，如果有房贷这个可能要考虑能否提前偿还一部分，减少月供，毕竟现在利率存款也很低（提前还贷这块仅个人建议，慎重参考）</p><p><strong>经济上的从容，可以在失业时，给我们不慌的勇气，可以有时间去调整和重新规划未来。</strong></p><h2 id="打造自己“不可替代性“"><a href="#打造自己“不可替代性“" class="headerlink" title="打造自己“不可替代性“"></a>打造自己“不可替代性“</h2><p>面对失业潮，唯一不变的就是不断提升自我，增强自身在职场上的竞争力。互联网行业瞬息万变，只有持续学习和更新技能，才能在这个残酷的行业中保持“不可替代性”。</p><p>这里不可替代性，不是指让技术做防御性代码编程，让产品做互撕，做部门刺头对做外沟通、互抢资源，这些low的操作，也是不提倡，也不会长久，害人害己。</p><p>不可替代是要跟随公司业务，积极尝试利用新技术提升自己和公司效率，比如多接触AI、区块链、大模型如何为公司业务结合和创新，多学习产品思维，商业思维为业务出谋划策，同时深入到技术深水区，解决其他人无法搞定的事情技术或者能力，无论你是技术、产品、运营、设计，是否具备自己是支柱的能力，没有就向公司支柱者学习，打造不可替代性。</p><h2 id="副业B计划"><a href="#副业B计划" class="headerlink" title="副业B计划"></a>副业B计划</h2><p>如果今天通知你裁员离岗， 明天你是否有有自己的副业、有自己工作的B计划、谋生的后路？</p><p>大家都困难的时候，也往往会有新领域进入的机会，发挥自己的优势，能否多次出卖自己时间的能力，我写的有篇找到自己能做的生意就是这个意思。自媒体、直播，技能分享、结合新模式让自己经验技能服务更多人，换来自己的副业。</p><p>如果你在互联网行业待的久，也积累了一定的行业经验和资源，不妨考虑创业。但要注意少投入交学费心态来进行，即便失败不影响自己生活。互联网低门槛、高传播性加上自己在这个圈子的技术、产品、资源的理解，也是尝试的，在寒冬的同时也一定有新的模式和机遇产生，也许是你找到新的大陆。</p><h2 id="学习提升认知"><a href="#学习提升认知" class="headerlink" title="学习提升认知"></a>学习提升认知</h2><p>积极参与技术社群、线上线下的行业活动，适当扩展自己在行业的影响力。这个时代不营销自己，会很吃亏。这个只有自己吃过亏，你才能真正理解我说的，毕竟我曾经也吃过。</p><p>向身边优秀的人学习，他们的思路和认知可能一针见血能帮忙你指点迷津，有些问题和困难在自己的认知层面你是找不到答案的。</p><p>可以多请教行业内资深人事，保持沟通，了解行业趋势与动向。通过他们的经验与建议，你可以更好地规划未来的发展方向。</p><h2 id="保持平常心"><a href="#保持平常心" class="headerlink" title="保持平常心"></a>保持平常心</h2><p>往往行业困境中也一定蕴藏着新的生机，如果我们尽早做好准备、持续提升，失业潮不仅仅是一场挑战，更是一次重新审视自身、调整发展方向的契机，我之前文章专门写过。</p><p>相信再漫长的冬季也终将过去，而春天的曙光必然会到来。保持平常心，熬过寒冬，未雨绸缪，给自己留好退路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在全球经济下行的大背景下，失业潮正以不可阻挡的势头席卷而来，任何行业都很难幸免。&lt;/p&gt;
&lt;p&gt;互联网行业，曾经风光无限，如今也显得步履维艰。随着基建生态成熟，资本退潮，市场存量博弈愈发激烈，裁员的阴影也笼罩着一线大厂。从阿里的“瘦身”到腾讯的“断臂”，一波波暗流涌动的裁员</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人必读：在数字化转型中如何为企业赋能</title>
    <link href="https://zhulg.github.io/posts/7c7de3fd.html"/>
    <id>https://zhulg.github.io/posts/7c7de3fd.html</id>
    <published>2024-11-27T15:08:23.000Z</published>
    <updated>2024-11-27T15:11:39.619Z</updated>
    
    <content type="html"><![CDATA[<p>在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。数字化的核心是思维方式的改变，而不是简单的工具更新。</p><h2 id="一，-技术驱动数字化转型的关键角色"><a href="#一，-技术驱动数字化转型的关键角色" class="headerlink" title="一， 技术驱动数字化转型的关键角色"></a>一， 技术驱动数字化转型的关键角色</h2><p>数字化转型的成败并非单纯的技术问题，但技术确实是其中不可或缺的推动者。技术的作用不仅仅是优化系统，更在于帮助企业将业务模式和技术手段紧密结合，实现降本、增效、提质，并最终反哺业务成长。</p><p>作为技术人，参与数字化转型的核心在于具备数字化思维和技术素养，同时深入了解企业的业务需求，找到技术与业务的最佳结合点。这不仅需要对现有业务的深度理解，更需要在转型过程中，通过技术手段推动企业向前发展。</p><h2 id="二，技术如何赋能企业数字化转型"><a href="#二，技术如何赋能企业数字化转型" class="headerlink" title="二，技术如何赋能企业数字化转型"></a>二，技术如何赋能企业数字化转型</h2><p>技术的价值往往体现在业务结果上。如果我们从业务结果倒推，哪些因素会影响业务的成功？这些就是技术人员需要重点关注并优化的环节。以下是我认为技术在数字化转型中能够发挥作用的几个关键领域：</p><h3 id="1-生产和销售链路的优化"><a href="#1-生产和销售链路的优化" class="headerlink" title="1. 生产和销售链路的优化"></a>1. 生产和销售链路的优化</h3><p>生产和销售环节往往是一个比较重要的，直接与公司的收益最相关，这种存量业务模式相对成熟且重复性较高，技术可以通过自动化、智能化手段来降低成本、提高效率。比如，使用技术为销售人员提搞客户识别、跟踪、获客、销售分析等等，生产过程中用技术改造流程，AI识别协助等，通过技术投入从而大幅提升企业的市场竞争力。</p><h3 id="2-产品服务价值的提升"><a href="#2-产品服务价值的提升" class="headerlink" title="2. 产品服务价值的提升"></a>2. 产品服务价值的提升</h3><p>产品服务价值链的延伸是技术发挥创新力的另一个重要领域。技术不仅能帮助企业优化现有产品，还能通过技术创新扩大服务的增量空间。例如，利用技术优化客户服务体验、提升品牌价值，以及实现企业社会责任目标，这些都能够为企业带来长期的市场效益。</p><h3 id="3-企业智能化体系的建设"><a href="#3-企业智能化体系的建设" class="headerlink" title="3. 企业智能化体系的建设"></a>3. 企业智能化体系的建设</h3><p>企业智能化体系是数字化转型的核心，也是技术最为集中发挥作用的领域。从基础设施建设到云服务、大数据、人工智能的应用，技术人员不仅需要实现企业现有业务的数字化，还要建立一个智能化的生态系统，内部链接员工，外部连接客户与合作伙伴，实现真正的互联互通与数据驱动决策。</p><p>数字化转型是一个复杂而长期的过程，企业必须根据实际情况，分阶段推进智能化建设。技术人在这个过程中，需要明确自己的阶段性目标，确保每一步都为企业的长远发展提供技术支持。</p><h2 id="总结：定位与价值"><a href="#总结：定位与价值" class="headerlink" title="总结：定位与价值"></a><strong>总结：定位与价值</strong></h2><p>归根结底，技术人的价值在于如何通过降本、增效、提质和反哺来助力企业成长。降本增效方面，技术通过合理的资源配置和数据化管理，帮助企业优化决策；在提升质量方面，技术可以通过数据分析、产品检测等手段，确保业务的高效运行；而反哺业务的关键，则在于如何利用大数据和AI等先进技术手段，从沉淀的数据中提取洞察，助力业务持续增长。</p><p>数字化转型是企业发展的必经之路，技术人也应当在这个过程中找到自己的定位，发挥最大价值，推动企业在新时代中实现新的突破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。数字化的核心是思维方式的改变，而不是简单的工具更新。&lt;/p&gt;
&lt;h2 id=&quot;一，-技术驱动数字化转型的关键角色&quot;&gt;&lt;a href=&quot;#一，-技术驱动数字化转型</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>互联网技术人表达力提升：3个珍藏方法，快速见效！</title>
    <link href="https://zhulg.github.io/posts/da6a9067.html"/>
    <id>https://zhulg.github.io/posts/da6a9067.html</id>
    <published>2024-11-27T14:46:19.000Z</published>
    <updated>2024-11-27T14:50:19.973Z</updated>
    
    <content type="html"><![CDATA[<p>在技术的世界中，逻辑是至高无上的法则；而在现实中，表达能力则是成功的关键。</p><p>互联网技术人员在与他人沟通时，常常听到被戏称为“说人话”或“听不懂”。这种现象反映出他们在表达中使用了过多的技术术语和专业痕迹，而又缺乏必要的表达锻炼，导致外行人难以理解。</p><p>尤其在与业务人员和运营人员的沟通中，缺乏产品人员的协作，问题更为突出。</p><p><strong>互联网技术人，如果想在职业生涯中全方位提升自己，其中表达能力也是重要的软实力，他也等同于你的技术硬实力，二者都要强，尽量不要存在短板。</strong></p><p>无论在技术团队管理中，或者自己技术答辩、日常工作与业务和产品人员沟通中，良好的表达能力都会帮助推动项目进展，赢得支持。当然互撕除外，话说回来，就算互撕，你是不是也要有很好的表达能力，不至于说出的话，让别人无法信服吧。</p><p>自己也是从一线技术小白一路摸索过来，到带领技术团队后，很多技术人身上也看到过自己当年的身影，特别在表达这块，或多或少是技术理工男的天性，大家都不擅长表达。在团队内也常分享或者逼迫他们去表达自己，从讲解技术入手，组织定期轮流分享来锻炼大家表达能力。</p><p>除此之外，也分享自己摸索的锻炼表达能力的方法，这些适用于所有人。（特别使用互联网技术人，因为我曾经也是纯粹的技术男，也是这样锻炼自己的，不妨试一试）</p><h2 id="方法一：刻意总结和提炼"><a href="#方法一：刻意总结和提炼" class="headerlink" title="方法一：刻意总结和提炼"></a>方法一：刻意总结和提炼</h2><p>这个可能很多人知道这个道理，但不一定会实战，或者总结不出来核心东西。其实，道理很简单，如果别人给你讲了一个故事，一个事情、一部电影、一项技术等等。你能否从他们讲的故事中总结出来他要表达的东西？</p><p>你可能会用几个短语来描述，或者又开始长篇叙述，一定是这样的，不信你可以试一试？（这些都不是好的表达方式）</p><p>刚开始，可以把这个故事进行提炼，用自己的表达方式在2，3句话内，抓住重点来总结，如果说不明白，那就尝试写下来，用文字来表达出来。然后与这个故事或事情的讲述人来核对看看。</p><p>反复锻炼，自己的表达能力无形中就会提升。</p><h2 id="方法二：多阅读写思考"><a href="#方法二：多阅读写思考" class="headerlink" title="方法二：多阅读写思考"></a>方法二：多阅读写思考</h2><p>道理很简单，就是鹦鹉学舌。</p><p>绝大部分人没有一开始就特别会表达，天赋除外，多阅读是最有效锻炼自己表达能力的方式，看起来一个是读，一个是说有点不相关。</p><p>事实并非如此，在阅读别人的文章时候，有可能写的内容你是知道的，比如，对于技术人来说，如果一篇技术文章你也知道原理，但是能否表达的跟别人写出来的文字表达更通俗易懂，好的文章一定是读完豁然开朗，这里面也一定有优秀的表达艺术。</p><p>从阅读中，看别人怎么表达，同样一句意思，别人用的为何如此恰到好处，模仿和学习这些文字的表达方式。阅读后，把自己的思考和想法写下来，坚持写思考和想法。</p><p>阅读多了知道别人怎么表达，思考写多了就把自己的表达思维也就更加清晰了，我记得TED上也有人分享过类似的方法。</p><h2 id="方法三：借助AI-工具"><a href="#方法三：借助AI-工具" class="headerlink" title="方法三：借助AI 工具"></a>方法三：借助AI 工具</h2><p>这个是最近发现非常高效的方法，无论是总结提炼还是你自己写文章，ChatGPT有个强大的能力，优化语句，这个其实在锻炼自己表达时非常有帮助。</p><p>你可能满头大汗写了自己的总结、发言稿、分享材料，可能写的过程中你自己都觉得不通顺、词不达意，更何况这东西是你要表达给别人的。。。没关系，先自己写出来。</p><p>写完后，把自己的草稿文字和要表达的要求告诉GPT来协助优化，来看看他对某段话的表达方式，跟你草稿区别在哪里，问什么他优化的更通顺。</p><p>通过对比和取舍你应该能从中学到好的表达方式，这个对表达的提升非常有帮助，与此同时也要注意防止AI的机器化，否则你的文章可能是空洞和无味，要学会取长补短的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在技术的世界中，逻辑是至高无上的法则；而在现实中，表达能力则是成功的关键。&lt;/p&gt;
&lt;p&gt;互联网技术人员在与他人沟通时，常常听到被戏称为“说人话”或“听不懂”。这种现象反映出他们在表达中使用了过多的技术术语和专业痕迹，而又缺乏必要的表达锻炼，导致外行人难以理解。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>2024年Rust的八大应用领域</title>
    <link href="https://zhulg.github.io/posts/7c9bf2c4.html"/>
    <id>https://zhulg.github.io/posts/7c9bf2c4.html</id>
    <published>2024-09-18T06:22:48.000Z</published>
    <updated>2024-09-18T06:44:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>Rust的八大用途你了解多少呢？| 良技漫谈<br>介绍下Rust的主要应用场景，特别是第8点目前也有不少在应用。</p><h2 id="1-系统编程："><a href="#1-系统编程：" class="headerlink" title="1. 系统编程："></a>1. 系统编程：</h2><p>Rust 因其内存安全性和高性能，适用于开发 操作系统、设备驱动、底层库和系统服务。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/63.png"></div><h2 id="2-高性能网络开发："><a href="#2-高性能网络开发：" class="headerlink" title="2. 高性能网络开发："></a>2. 高性能网络开发：</h2><p>Rust 常用于构建 高性能、低延迟的网络服务器和分布式系统。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/64.png"></div><h2 id="3-嵌入式与物联网-IoT-："><a href="#3-嵌入式与物联网-IoT-：" class="headerlink" title="3. 嵌入式与物联网 (IoT)："></a>3. 嵌入式与物联网 (IoT)：</h2><p>Rust 的资源效率和跨平台特性，使其非常适合用于开发嵌入式设备固件和物联网应用。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/65.png"></div><h2 id="4-WebAssembly和前端开发："><a href="#4-WebAssembly和前端开发：" class="headerlink" title="4. WebAssembly和前端开发："></a>4. WebAssembly和前端开发：</h2><ul><li>支持将代码编译成 WebAssembly (Wasm)，在浏览器中以接近原生速度运行，适合开发高性能前端Web 应用和浏览器扩展。</li></ul><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/66.png"></div><h2 id="5-命令行工具开发-CLI-："><a href="#5-命令行工具开发-CLI-：" class="headerlink" title="5. 命令行工具开发 (CLI)："></a>5. 命令行工具开发 (CLI)：</h2><p>Rust 的高效性能和良好的跨平台支持，使其成为开发命令行工具 (CLI) 的理想语言，最近也有很多基于rust重新的好佣的命令行工具。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/67.png"></div><h2 id="6-区块链与加密货币："><a href="#6-区块链与加密货币：" class="headerlink" title="6. 区块链与加密货币："></a>6. 区块链与加密货币：</h2><p>Rust 因其内存安全性和高并发处理能力，被广泛应用于区块链技术开发，包括智能合约、加密钱包、去中心化交易平台。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/68.png"></div><h2 id="7-游戏开发："><a href="#7-游戏开发：" class="headerlink" title="7. 游戏开发："></a>7. 游戏开发：</h2><p>Rust 的 并发处理和图形处理能力，使其在高性能跨平台游戏开发中表现出色。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/69.png"></div><h2 id="8-其他领域："><a href="#8-其他领域：" class="headerlink" title="8. 其他领域："></a>8. 其他领域：</h2><p>Rust 在桌面应用、跨平台移动端底层组件开发、人工智能 (AI)、数据科学和音视频处理等领域逐渐得到应用，以完全和高效性能被广泛多领域选用。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/70.png"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Rust的八大用途你了解多少呢？| 良技漫谈&lt;br&gt;介绍下Rust的主要应用场景，特别是第8点目前也有不少在应用。&lt;/p&gt;
&lt;h2 id=&quot;1-系统编程：&quot;&gt;&lt;a href=&quot;#1-系统编程：&quot; class=&quot;headerlink&quot; title=&quot;1. 系统编程：&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Rust" scheme="https://zhulg.github.io/categories/Rust/"/>
    
    
    <category term="Rust" scheme="https://zhulg.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>用2个重要途径，打造自己技术影响力</title>
    <link href="https://zhulg.github.io/posts/c0234e14.html"/>
    <id>https://zhulg.github.io/posts/c0234e14.html</id>
    <published>2024-09-06T08:32:19.000Z</published>
    <updated>2024-09-06T08:34:25.312Z</updated>
    
    <content type="html"><![CDATA[<p>对于绝大多数技术人来说，往往会忽略自己在行业里的影响力，更多是埋头在自己所在的技术领域里，专注于解决具体问题、提升技术能力。</p><p>然而，在现在高速发展且高度内卷的时代下，单纯拥有技术实力可能并不足以让你脱颖而出，亦或许在短期内有不错的成就，但如果没有影响力支持，这些成绩也可能难以转化为持续的发展优势。</p><p>影响力对技术人来说，实际上是一种无形的资产。它不仅能为你带来更多的机会，还能激励你不断学习和提升自己。</p><h2 id="技术影响力"><a href="#技术影响力" class="headerlink" title="技术影响力"></a>技术影响力</h2><p>技术影响力都有哪些 ，本质是什么。 </p><p>技术影响力可以是行业内的关注度，能否被行业里大家所熟知，技术相关点能否被大家认同，技术方案能否被大家认同等。其本质是技术影响力能否被影响他人决策和思考的能力（当然是最佳实践方面相关）</p><p>例如，通过对某一技术的深入理解和讲解，你可以在技术圈内扩大自己的影响力。这种影响力不仅可以在团队或公司内部建立权威和信任，还能在更广泛的社区中得到认可，进而形成对你个人品牌的强大支持。</p><h2 id="如何打造影响力"><a href="#如何打造影响力" class="headerlink" title="如何打造影响力"></a>如何打造影响力</h2><p>持续输出和分享有价值的内容，技术使用，问题分析和定位、架构设计和思考。</p><p>尝试下写作和演讲。</p><p>写作的锻炼可以从技术文档的翻译，技术方案的整理，能否被别人轻易理解和认同代表着自己写作表达和总结能力的提升，持续写作和输出。而当你逐渐掌握了写作的技巧，原创内容的输出将成为你个人品牌的一部分 。有时你会的技术和你涉及的技术方案，不一定能用文字很好的写的出来，写的出来不一定能让其他人看的懂知道你在说什么。不信的话，你可以尝试来写下，一个好的技术文档输出也绝对需要多次的打磨的。</p><p>我们写作时用心投入，结合例子让别人能快速理解，是自己的原创，不要一顿操作和转载，自己也没有消化。要对内容负责，坚持这样的写作态度才能吸引并引起读者的共鸣。还有个技巧，当写作的时候看看能否用一句最少得字数，清晰的表达出对应的技术方案，这些锻炼都有助于对文字总结概括能力的培养，我们称之为”能写“。写作的平台上可以自己建立博客，公众号、视频媒体等，看自己喜欢那种。也不要把时间对花在了影响力打造上，这样你技术钻研的时间也会很少，会变成技术人眼中的”很能说“，要追寻技术和影响力的平衡点。</p><p>技术人演讲，不仅能把自己技能分享输出扩大自己影响力，演讲的准备工作也是对自己知识点提升的重要手段，绝对是一举得到的收益。演讲不仅需要对掌握的知识的概括和总结，还需要有良好的表达能力。要成为一名优秀的技术演讲者，关键在于反复练习和精心准备，那种表达是别人容易听懂的，哪些是不需要反复啰嗦，需要精简的，如何在有效限的时间内，提炼出最核心的内容，并用简洁有力的语言表达出来。也可以多听下别人的演讲，比如TED上技术人演讲，学习他们的表达方式和逻辑结构，从魔法加自己的练习，敢于在公众面前发表自己的技术观点，可以在小组内进行技术分享，公司呢，外部社区，慢慢就会提高自己的技术演讲能力了。另外，每次在演讲后自己可以从侧面关注下听众的反馈，复盘自己的演讲，哪些点讲的不好，哪些地方需要观众互动，那个例子举的还不够贴近等等，复盘是为了下次更好。</p><h2 id="长期主义"><a href="#长期主义" class="headerlink" title="长期主义"></a>长期主义</h2><p>打造自己的技术力一定是从小范围开始并努力扩大，同时也是一件需要技术人坚持的长期主义。</p><p>有时我们被工作压的没有时间进行自我总结和分享，就更别谈尝试做技术影响力的事情了，能把当天工作做完就不错了。但作为技术人我们需要把抽时间来把自己影响力，自己的技术品牌持续维护起来，这样才能让让自己进入良性循环，毕竟除了上班打工也要把自己技能让等多人知道，为后续自己副业和人脉做准备。</p><p>影响力的积累是一个长期的过程，需要耐心和毅力，无论是进行写作还是一些演讲或者公开教程，都需要一点点积累，持续分享和帮助更多的人，把这件事作为长期主义来坚持。即使短期内效果不显著，也不要放弃。坚持做正确的事情，将影响力转化为职业生涯的强大助力，也是每个技术人应当追求的目标。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>影响力的建立是技术人职业发展的关键环节，它不仅反映了个人的价值，也总结和传递了自己的知识和经验，同时也是技术宣传的重要手段。每一次用心的输出和分享，都是在帮助更多的人。</p><p>真正的影响力，也不在于一朝一夕，而在于我们在不断成长中，始终如一的付出与坚持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于绝大多数技术人来说，往往会忽略自己在行业里的影响力，更多是埋头在自己所在的技术领域里，专注于解决具体问题、提升技术能力。&lt;/p&gt;
&lt;p&gt;然而，在现在高速发展且高度内卷的时代下，单纯拥有技术实力可能并不足以让你脱颖而出，亦或许在短期内有不错的成就，但如果没有影响力支持，这</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人别被AI课割韭菜</title>
    <link href="https://zhulg.github.io/posts/f452b115.html"/>
    <id>https://zhulg.github.io/posts/f452b115.html</id>
    <published>2024-08-29T00:17:13.000Z</published>
    <updated>2024-08-29T00:19:55.072Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章，或许会引起那些专门售卖AI课程者的不满。我要强调，这里说的是那些纯粹割韭菜的AI课，真正有深度和干货的课程自然另当别论。</p><p>作为技术人，你是否已经注意到这些现象？这些课程大多打着“大模型”的旗号，内容却五花八门，从AI写作、AI作图、AI编程到用AI快速赚钱等等，无所不包。</p><p>仔细分析这些课程，会发现大多数内容浅显，仅停留在表面应用。课程或许教你如何使用提示词、如何做个图、通过比喻讲解一些模棱两可原理，或教你输出一些文章，整体来看虎头蛇尾。</p><p>这些课程通常存在以下几个问题：</p><ol><li><p>内容浅显：大多数课程只讲解基础概念，缺乏深入的技术原理和流程环节。</p></li><li><p>缺乏实践：很多课程没有实际项目的指导，或者仅通过简单例子介绍AI工具的使用。</p></li><li><p>误导性宣传：有的课程夸大效果，贩卖焦虑，吸引对AI感兴趣的技术人，实际操作远非如此。</p></li></ol><p>例如，之前有新闻报道某些利用AI课虚头大肆卖课割韭菜的事件，某清华教授靠卖AI课狂赚上亿，然而他本人却是门外汉，靠的就是营销割小白韭菜。</p><p>图片</p><p><strong>这些课程是否一无是处？也不尽然。</strong></p><p>对于小白用户，如果想快速了解某些概念，利用现有的AI模型和工具制作图像、视频，这些课程可能会提高工作效率。如果你懒得查资料且有经济条件购买，这类课程也许有帮助。</p><p>但对于技术人来说，这类课程并不建议。你需要防止这些课程误导你对AI和大模型产生错误认识。</p><p>仅知道概念、会使用ChatGPT等AI模型，对于技术人来说远远不够。非技术人如果掌握了提示词的使用，可能比你还会操作，毕竟现在国内也有很多出名的大模型产品，包括百度的文心一言、字节的抖音豆包大模型、腾讯的混元大模型、百川智能的百川大模型、Kimi和科大讯飞的星火大模型等等，一些写作类用户可能使用的更为溜一些。</p><p>技术人学习大模型技术，可以结合自己的情况和发展方向选择一些入门基础课程。以下是我认为需要学习和了解的内容：</p><p>首先，如果你是计算机专业出身或从事技术工作，应了解数学、统计学和编程语言。大模型时代使用较多的是Python语言，但语言只是工具，不要局限于此。</p><p>了解AI大模型的相关名词和概念，它们之间的关联和关系，比如以下这些术语：</p><p>• AI (Artificial Intelligence): 模拟人类智能的计算机系统。</p><p>• Machine Learning (ML): 通过数据训练模型，使计算机能够自动学习和改进。</p><p>• Deep Learning: 使用神经网络进行的机器学习，通常具有多层架构。</p><p>• Neural Network: 模仿人脑结构的计算模型，用于识别模式和预测。</p><p>• Natural Language Processing (NLP): 计算机处理和理解人类语言的技术。</p><p>• Training Data: 用于训练机器学习模型的数据集。</p><p>• Model: 通过训练算法从数据中学到的数学表示，用于预测或分类。</p><p>• Algorithm: 一组用于解决特定问题的规则或步骤。</p><p>• Transformer: 现代NLP中的重要模型架构，依赖于自注意力机制。</p><p>• GPT (Generative Pre-trained Transformer): 一种生成式预训练语言模型，用于生成文本。</p><p>其次，了解原理后，需要深入学习大模型所使用的相关技术，如神经网络、卷积神经网络（CNN）、循环神经网络（RNN）、生成对抗网络（GAN），以及用于文本处理的NLP、图像识别的计算机视觉。深入理解Transformer模型的结构和工作原理，学习大模型的训练方法和技巧，如分布式训练、混合精度训练等，学习如何优化大模型的性能和调优超参数。</p><h3 id="最重要的事，自己动手实践。"><a href="#最重要的事，自己动手实践。" class="headerlink" title="最重要的事，自己动手实践。"></a>最重要的事，自己动手实践。</h3><p>可以搭建一些开源大模型，用本地的CPU进行部署，学习API相关调用，进行数据准备和预处理、模型推理和结果解析等操作。通过这些实践，你会对大模型有更深入的理解。对于技术人来说，这还只是知道大模型在每个步骤大概的工作方式。</p><p>技术人学习AI大模型，先理解其工作原理，再去做开源模型部署和调参数以及服务的对接，确实大多数技术人不从事底层大模型开发，但在应用层开发和使用大模型技术时，要多要思考大模型技术如何服务于当前的产品，并与未来的产品业务形态结合，提高效率。</p><p>技术人不要被市面上贩卖焦虑的AI韭菜课所迷惑。 任何技术都有连续性，不是凭空冒出来的新技术，脚踏实地学习技术本质才能实现更多的结合与创新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章，或许会引起那些专门售卖AI课程者的不满。我要强调，这里说的是那些纯粹割韭菜的AI课，真正有深度和干货的课程自然另当别论。&lt;/p&gt;
&lt;p&gt;作为技术人，你是否已经注意到这些现象？这些课程大多打着“大模型”的旗号，内容却五花八门，从AI写作、AI作图、AI编程到用AI快</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>尽早觉醒：找到自己一人能做的互联网生意</title>
    <link href="https://zhulg.github.io/posts/d8de0f99.html"/>
    <id>https://zhulg.github.io/posts/d8de0f99.html</id>
    <published>2024-08-29T00:03:58.000Z</published>
    <updated>2024-08-29T00:06:40.927Z</updated>
    
    <content type="html"><![CDATA[<p>没有经历过裁员的职场是不完美的。</p><p>无论何种原因经历次裁员，可能对心智都是一次提升，前面也写过技术人怎么利用空窗期的文章技术人的空窗期，你的涅槃重生。经历过裁员的时候难免感到复杂和沉重。离开的背后，不仅有情感的波动，还有对未来的深深焦虑。</p><p>当你被通知离职的那一刻，情绪复杂得难以描述。但是，当冷静下来，你会意识到，职场就是一个大染缸，个人的价值往往被淹没在复杂的分工和协作中，逐渐失去了话语权。</p><p>在这样的环境下，早日觉醒，找到自己一人能做的互联网生意比什么都重要，毕竟打工的风险也不小。</p><h2 id="互联网的机遇"><a href="#互联网的机遇" class="headerlink" title="互联网的机遇"></a>互联网的机遇</h2><p>我们生活在一个充满机会的时代，互联网为每个人提供了一个可以大展拳脚的舞台。无论你是程序员、设计师，还是其他领域的专业人士，只要你有点子、有执行力，就有可能通过互联网打造出属于自己的一片天地。</p><p>移动互联网时代许多人通过创业实现财务自由的，他们可能只是做了一个小小的网站，或开发了一款简洁但实用的应用，就这样一步步积累财富，最终实现了阶层跃迁。但这条路并非一帆风顺，成功的背后，是无数次的失败和坚持。互联网的世界瞬息万变，只有那些能够快速适应、不断学习的人，才能真正抓住机遇，脱颖而出。</p><p>为什么？</p><p>因为互联网的诱惑也是巨大的，你有没有注意到，我们身边包括自己，也常常陷入在社交媒体上，刷短视频、看无聊的资讯，时间一晃而过，什么也没得到？这些看似无害的娱乐，其实是在悄悄蚕食我们的注意力和斗志，让我们逐渐迷失方向。我们必须清醒，主动掌控自己的时间和精力，把注意力集中在能带来实际收益的事情上。</p><h2 id="从技术到产品到生意"><a href="#从技术到产品到生意" class="headerlink" title="从技术到产品到生意"></a>从技术到产品到生意</h2><p>作为一名技术人，我曾经也接外包项目，感觉这是技术变现最好的方式。</p><p>毕竟，看上去是最实际的。但事实证明，这条路并没有我想象的那么简单。接外包不仅需要你有深厚的技术功底，更需要你能跟客户进行有效的沟通，还要应对各种突发的需求变化，还有可能最后的薪资以各种理由拿不到，还有很多时候，甲方的要求难以预料，而内部的协作也不尽如人意，搞得人筋疲力尽。还有你帮朋友忙实现了些功能，但聊钱时候又碍于面子，自己也没分成。。</p><p>接外包这种方式虽然能赚点钱，但很难长久，也没有持续的积累，你也不知道你下个项目是什么行业，什么需求，来了就接，你技术也没有深度的。</p><p>相反，我发现，如果我们通过技术产品化，自己做点小生意，反而更容易在长久的时间里积累财富。</p><p>为什么这么说呢？因为通过技术产品化，你不仅可以积累知识，还能把知识转化为产品，形成自己的竞争优势。这种优势，一旦建立起来，就是别人难以轻易复制的壁垒。</p><p>比如，早些年在移动互联网早期非常火热，自己开发了一些APP的工具类应用，这些工具类应用比较有长尾收益，虽然当时看起来很小，但是一些广告收入，一些付费用户还是可以源源不断，也算是工资外的第一桶小金。做自己的一个产品，哪怕小只要持续打磨，在某一个垂直赛道做好，那么在国内这么大的用户基数下，也是可以分一杯羹的。特别是现在AI可以做到辅助你代码，那有些不熟悉的业务领域你也是可以进入的，一旦在这些垂直赛道和传统行业进行数字化、互联网化的同时，你一定可以找到自己的小生意。</p><p>写到这，可能会有人反驳，你说的一些产品市场上已经有很多了，自己再去做毫无意义。但我想告诉你的是，只有亲自去实践，你才能发现那些不为人知的细节，找到属于自己的市场空隙，比如，你做一款产品你就知道那个地区用户最多，那个时间段，什么年龄用户最活跃等等，实践中获得的经验，尝试做自己的生意，哪怕在小，也要尽早做起来（AI时代，利用工具自己完全可以是一个团队）因为这产品只属于你，变做边改。</p><h2 id="觉醒和行动"><a href="#觉醒和行动" class="headerlink" title="觉醒和行动"></a>觉醒和行动</h2><p>在这个充满机遇与挑战的互联网时代，早点醒悟，真的很重要。</p><p>不要总想着依赖团队或者等什么大平台来拯救你，机会是靠自己去找的。别盲目跟风去追那些看似宏大的项目，脚踏实地，先从一个小生意做起。通过不断学习和积累，你会发现，渐渐地，你就拥有了属于自己的核心竞争力。</p><p>行动起来，去找到那个你一个人也能干的互联网生意。</p><p>探索、尝试，不断提升自己。别怕一开始很烂，要边做边改，要有信心持续完善，毕竟这生意属于你自己，也可能带来长尾收益。最重要的是，从中你会有不一样的收获，这也许会成为你未来成功的基石。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没有经历过裁员的职场是不完美的。&lt;/p&gt;
&lt;p&gt;无论何种原因经历次裁员，可能对心智都是一次提升，前面也写过技术人怎么利用空窗期的文章技术人的空窗期，你的涅槃重生。经历过裁员的时候难免感到复杂和沉重。离开的背后，不仅有情感的波动，还有对未来的深深焦虑。&lt;/p&gt;
&lt;p&gt;当你被通</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人要重视写作能力</title>
    <link href="https://zhulg.github.io/posts/7a5a1805.html"/>
    <id>https://zhulg.github.io/posts/7a5a1805.html</id>
    <published>2024-08-21T15:31:58.000Z</published>
    <updated>2024-08-21T15:35:04.195Z</updated>
    
    <content type="html"><![CDATA[<p>技术人要重视自己起来写作能力的培养</p><p>可观来讲，技术人大部分是偏理科的这部分人，某种程度来讲，大家擅长代码的编写，而又不擅长于写作，无论是从技术博客到用于日报，周报的汇报材料，相比代码书写可能就不是那么轻松。</p><p>那技术人写作能力该不该刻意练习下？答案是肯定的，犹如你代码的写作能力，是需要锻炼起来的，先来看看写作都有哪些好处。</p><h2 id="技术人写作好处"><a href="#技术人写作好处" class="headerlink" title="技术人写作好处"></a>技术人写作好处</h2><p>在高效学习方法里，你可能听说过费曼学习方法，他简单来说，就是当你学习到新知识后，你要能用最简单的话语和描述，向别人清楚地介绍出来，来检验自己是否理解和掌握。</p><p>记得大学时候遇到一个教网络通信的一个教授说，他也是构建我国互联网通信方面的鼻祖人物，他在课堂上经常给我们讲：检验自己是否掌握知识，最好办法就是你给别人介绍时，要达到如同介绍我中午吃了什么饭一样，自己清楚明了，还要别人能听懂。</p><p>听起来话很简单，但他说的意思其实就是费曼学习方法，这里面包含了多个层面的能力锻炼</p><ol><li>知识的总结表达能力</li><li>把知识传播给他人</li><li>一个非常好的学习方法</li></ol><p>一个好的总结和表达能力也是需要通过练习和思考的过程，写作无疑是一个非常好的方式，首先需要把相关技术进行概括和总结，用抽象和简练的文字表达出来。这个过程说起来简单，但是当你实践并尝试写作进行总结和概括时，就需要你深入的理解技术对应的点，点与点关系、到面、面和面直接的关系。</p><p>当把一个复杂的技术能通过总结提炼写下来后，通过自己思考，去繁化简把最容易懂的东西呈现出来时，这也跟后来学习的人一个莫大的帮助，把技术传播下去。</p><p>如果前面2个环节已经做到，那详细这这块你的知识点和技能的掌握一定时一个深入的层次了。</p><p>除此之外，技术人写作能力在问题表达，进度汇报，述职方面等也有很大的帮助，虽有干的好的不如写的好，这样有些方面的贬义评价，但是作为正直的技术人，除了要干的好，也要锻炼自己写做能力，特别写小作文能力，这方面也要客观的学会写作表达。</p><h3 id="技术人怎么练习起来"><a href="#技术人怎么练习起来" class="headerlink" title="技术人怎么练习起来"></a>技术人怎么练习起来</h3><p>写作先从一点点练习起来，从日报，从当天计划开始写起，总结和记录自己要做目标、计划、步骤。</p><p>从日常思考和向上汇报练习写作的能力，了解写作受众时谁，目标群体是谁，所要写的内容大纲是什么，结构是什么样的，要表达和输出的思想是什么，写作前思考这些点后再动起来。</p><ul><li><p>写作的工具和辅助你呈现的数据，画图，图表，AI工具需要知道，这些能帮助你提升效率，并在写作呈现上更生动</p></li><li><p>写作风格上，更要注重语言的简练，能清晰准确表达，对复杂的技术术语能呈现出对应的例子，抽象原理，使枯燥的技术能表达有趣和易懂</p></li><li><p>写作内容上，要具备技术原理的深度，刨根问底，对原理和技术细节要负责，更不要网上拿来主义，缺少验证，不要产生垃圾技术文章，那写作也就没有意义了。</p></li></ul><p><strong>最重要的事要写作起来，思考起来，写作可以锻炼和进步，哪怕一开始写的巨烂无比，加持写加持改进才是最快的练习起来的方式。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;技术人要重视自己起来写作能力的培养&lt;/p&gt;
&lt;p&gt;可观来讲，技术人大部分是偏理科的这部分人，某种程度来讲，大家擅长代码的编写，而又不擅长于写作，无论是从技术博客到用于日报，周报的汇报材料，相比代码书写可能就不是那么轻松。&lt;/p&gt;
&lt;p&gt;那技术人写作能力该不该刻意练习下？答案</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>2024年客户端、前端开发，这些赛道值得你关注</title>
    <link href="https://zhulg.github.io/posts/9826b570.html"/>
    <id>https://zhulg.github.io/posts/9826b570.html</id>
    <published>2024-08-19T05:43:25.000Z</published>
    <updated>2024-08-21T15:33:13.975Z</updated>
    
    <content type="html"><![CDATA[<p>首先，这篇文章没有任何广告，只是给目前前端开发、客户端开发伙伴们的一些个人思考和建议。</p><p>前几年，移动互联网如火如荼，给大家在吃住行方面带来了巨大的便利，也改变了大家的生活方式。外卖、打车、支付、金融等应用极大地方便了人们的日常生活。</p><p>特别是客户端开发的岗位，前几年由于开发需求旺盛，薪资非常可观。但随着移动APP生态的完善，APP的需求也接近饱和，进入了维护期。许多资深前端工程师、客户端Android、iOS、Flutter工程师由于种种原因，职业发展也进入了瓶颈期。一方面担心失业问题，另一方面市场上的新岗位也不如以前多。</p><p><strong>人通常都是有惰性的，即便知道这个行业在走下坡路，可能还是不好轻易的做出改变和尝试新赛道</strong></p><p>确实转型新赛道来进行开发，也有一些学习成本，那我们要尽可能选择适合自己的技术栈，能快速切入的一些领域。</p><p><strong>先尝试的学习和用起来，看看实际写起来是怎么样子的，了解岗位薪资和赛道人数。</strong></p><p>就比如之前做J2EE(现在很少听这个名字了)开发大火时期，业余里进行了Android、iOS研究，没想到在1-2年内业余薪资迅速远远超过了主业工资2倍，且大量移动岗位冒出，那怎么办，放弃J2EE,  顺应时代趋势来开发啊。</p><p>目前，互联网可以说处于Web3.0阶段，这个时期或未来的发展如何，可以看到的是区块链和大模型AI行业。今天先看一下前端和客户端技术人员在区块链行业有哪些可以做的事情。</p><p>这里的区块链指的是区块链相关的开发岗位有哪些可以切入的，也是政府支持和开展的 图片引用：<a href="https://www.gov.cn/" target="_blank" rel="noopener">https://www.gov.cn/</a></p><p><a href="https://www.gov.cn/lianbo/bumen/202401/content_6925730.htm" target="_blank" rel="noopener">2025年初步形成支撑区块链发展标准体系</a></p><p><a href="https://www.gov.cn/lianbo/difang/202405/content_6952135.htm" target="_blank" rel="noopener">上海启动首批国资国企区块链创新应用场景建设</a></p><p><strong>区块链技术是一种分布式账本技术，可以让信息记录更加安全、透明和不可篡改</strong>。从官方发布的信息看，技术可以应用于许多领域，比如共识机制、分布式应用、智能合约、数据上链等。</p><p>那适合前端和客户端开发，又比较好进行切入，或者可以先尝试起来的区块链开发岗都有哪些，薪资如何，我觉得可以从这些方面进行尝试：</p><h3 id="DAPP开发"><a href="#DAPP开发" class="headerlink" title="DAPP开发"></a>DAPP开发</h3><p> 如果你是做前端开发的JavaScript、React、vue不在话下，那可以直接来构建DApp的前端部分，并结合Web3.js或Ethers.js进行智能合约交互。<strong>Web3.js</strong> 用于与以太坊区块链进行交互，支持发送交易、调用智能合约等操作。<strong>Ethers.js</strong> 功能类似于Web3.js，但更加现代化和模块化。</p><p>如果你是客户端开发其实也可以进行DAPP来开发，通过WalletConnect协议，开发支持移动设备的DApp开发，这些都可以沿用一些移动开发的经验。与智能合约进行交互，这部分学习和你在移动开发中与后端API交互的经验相似。</p><h3 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a><strong>智能合约开发</strong></h3><p>无论前端还是客户端如果接触了区块链还可以进行智能合约的开发，可以理解它是自动执行合约条款的代码，运行在区块链上，确保交易的透明和安全。</p><p>智能合约编写语言，主要有Solidity：是太坊及其兼容区块链平台，Rust ：用于Polkadot、Solana区块链平台的智能合约开发，这个可能需要学习一下Solidity, rust语言了。</p><p>如果是前端和客户端开发，这2个语言学习起来还是比较容易的，语法也比较类似 Solidity也有JavaScript的借鉴，rust也是跟kotlin、swift有相似之处。</p><h3 id="其他区块链开发"><a href="#其他区块链开发" class="headerlink" title="其他区块链开发"></a><strong>其他区块链开发</strong></h3><p>还有一些区块链的其他开发方向，比如共识算法、公链开发等。这些需要较高的技术功底，涉及密码学和安全学，可能不太适合目前前端、客户端开发的技术基础。</p><p><strong>DAPP开发和智能合约开发比较适合前端、客户端开发人员尝试切换赛道、可以在业余时间进行学习和研究，而且行业薪资待遇不错，业内人数也不拥挤。</strong>长远看，这是一种技术趋势和应用创新，从上方官方新闻也可以看的出。</p><h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a><strong>思考总结</strong></h2><p>以上就是对前端、客户端开发，比较低成本切换到区块链岗位赛道的建议，可以业余尝试和了解，多学总是没有坏处的。</p><p>技术不是一成不变的，业务需求也是一直变革，前端、客户端开发还是要做好未雨绸缪提升自己技术力。</p><p>切换技术赛道和岗位时，还是要结合自身的技术栈来适应技术潮流，提升竞争力，拓宽自己的岗位选择。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，这篇文章没有任何广告，只是给目前前端开发、客户端开发伙伴们的一些个人思考和建议。&lt;/p&gt;
&lt;p&gt;前几年，移动互联网如火如荼，给大家在吃住行方面带来了巨大的便利，也改变了大家的生活方式。外卖、打车、支付、金融等应用极大地方便了人们的日常生活。&lt;/p&gt;
&lt;p&gt;特别是客户端</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
</feed>
