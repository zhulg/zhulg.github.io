<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术干货分享 | zhulg技术博客</title>
  
  <subtitle>专注全栈开发、技术分享与解决方案</subtitle>
  <link href="https://zhulg.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhulg.github.io/"/>
  <updated>2024-12-27T23:24:19.026Z</updated>
  <id>https://zhulg.github.io/</id>
  
  <author>
    <name>zhulg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>互联网小生意平台推荐，思考适合你的副业机会</title>
    <link href="https://zhulg.github.io/posts/e3b99003.html"/>
    <id>https://zhulg.github.io/posts/e3b99003.html</id>
    <published>2024-12-27T23:18:43.000Z</published>
    <updated>2024-12-27T23:24:19.026Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写了一篇关于互联网人尽早找到自己一人能做的小生意，<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356058&idx=1&sn=4684f83f6a948c31eed382f2ccbaefec&chksm=ffec485ac89bc14ca75e6b546adc65c05d610d842b5435553863cfefac1066862d79ac7c5ad6&scene=21#wechat_redirect" target="_blank" rel="noopener">尽早觉醒：找到自己一人能做的互联网生意</a> 收到不少读者私信和评论关于小生意怎么做，能感觉到大家对于如何开启小生意及如何利用好互联网平台这块充满兴趣。</p><p>尤其是针对设计、技术等互联网行业同学，这块的读者今天重点介绍一些相关副业平台，可以从这些平台上做一些自己的小生意赚钱，或者从这些平台需求痛点上能否给你带来思考，也看看这些外面的世界和平台能否给你带来一些需求灵感，找到自己的一些小生意。</p><p><strong>通过这些小生意平台，可以尝试增加收入，更重要的是观察思考找到适合自己的发展方向和副业机会。</strong></p><p>先看一些设计类的平台吧，这些平台好的设计都能给我们生活中带来一些色彩（我知道这些设计类平台，是因为有时候我也会看下好的设计和配色如何用技术在应用里呈现），如果设计类同学还知道更多平台，可以补充到评论里，分享使人进步。</p><h1 id="设计类平台"><a href="#设计类平台" class="headerlink" title="设计类平台"></a>设计类平台</h1><h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a>Dribbble</h2><p>这个在设计圈应该都知道，通过展示作品集吸引客户，可以自己设计挂上该平台，可接单赚钱，适合平面设计、UI/UX设计等领域。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072233598" alt="图片"></p><p>官方地址: <a href="https://dribbble.com" target="_blank" rel="noopener">https://dribbble.com</a></p><p>99designs</p><p>设计师可以参与设计比赛，可以参加比赛获取奖金，也可以直接接设计订单，logo设计，食品包装、书籍封面等等。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072019669" alt="图片"></p><p>官方地址: <a href="https://99designs.com" target="_blank" rel="noopener">https://99designs.com</a></p><h2 id="Behance"><a href="#Behance" class="headerlink" title="Behance"></a>Behance</h2><p>全球设计师展示作品集的平台，也提供工作机会的板块，网站的愿景也写的比较明确，帮助招聘人员和创作者通过创意展示来找到彼此联系。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072019913" alt="图片"></p><p>官方地址: <a href="https://www.behance.net" target="_blank" rel="noopener">https://www.behance.net</a></p><h2 id="Creative-Market"><a href="#Creative-Market" class="headerlink" title="Creative Market"></a>Creative Market</h2><p>这个网站比较出名设计素材交易平台，适合设计师可以在这里出售自己设计的数字产品，如字体、图标、网站模板，虚拟商品，可以直接上架售卖。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072306096" alt="图片"></p><p>官方地址: <a href="https://creativemarket.com" target="_blank" rel="noopener">https://creativemarket.com</a></p><p><em>国内的这类平台，有站酷 、花瓣网、稿定网、包图等，整体上比较有浓浓的商业气息，个人不是很喜欢，有兴趣的设计师可以自行对比。</em></p><h1 id="技术类平台"><a href="#技术类平台" class="headerlink" title="技术类平台"></a>技术类平台</h1><p>建议首先尝试国外的一些平台，尤其是对于技术人员来说，国外的机会相对更多，回报也更可观。相比之下，国内的平台竞争激烈，出价较低，可能并不值得你投入过多的时间和精力放在互卷上，还有可能缺乏创新的东西上。</p><h2 id="GitHub-Sponsors"><a href="#GitHub-Sponsors" class="headerlink" title="GitHub Sponsors"></a>GitHub Sponsors</h2><p>开源项目资助平台，说白了就说通过自己维护开源项目来接受大赏，维护开源项目可以是代码，也可以是文档等，而且目前平台没有抽成，100%给参与的维护者，需要开通sponsors，参与开源项目维护。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072020397" alt="图片"></p><p>官方地址: <a href="https://github.com/sponsors" target="_blank" rel="noopener">https://github.com/sponsors</a></p><h2 id="Toptal"><a href="#Toptal" class="headerlink" title="Toptal"></a>Toptal</h2><p>这个平台适合比较有经验的程序员，从网站介绍也可以看到，当然给的薪资也不低，他的核心理念就是提供专业领域的顶级自由职业者，除了技术，也有设计，金融类项目。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072331776" alt="图片"></p><p>官方地址: <a href="https://www.toptal.com" target="_blank" rel="noopener">https://www.toptal.com</a></p><h2 id="Upwork"><a href="#Upwork" class="headerlink" title="Upwork"></a>Upwork</h2><p>如同网站口号，“How work should work” 他是美国的一个自由职业平台号称全球第一，说白了外包平台，提供有设计、开发、市场营销等，可以在这个上边找到对应的开发需求，比如app开发国内已经趋于饱和下，在全球来接单显然更有优势一些。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072020899" alt="图片"></p><p>官方地址：<a href="https://www.upwork.com/" target="_blank" rel="noopener">https://www.upwork.com/</a></p><h2 id="Freelancer"><a href="#Freelancer" class="headerlink" title="Freelancer"></a>Freelancer</h2><p>规模上和Upwork不分上下，也是为自由工作者提供工作机会，还是外包服务平台，除了技术类，也有其他设计、工程类，科学、营销等，程序员的话可以提供定制软件开发、网站构建、应用开发等接全球各地的项目，其中技术类也有前后端项目，具体可以根据自己技术来找工作。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072348668" alt="图片"></p><p>官方地址：<a href="https://www.freelancer.com/" target="_blank" rel="noopener">https://www.freelancer.com/</a></p><h2 id="Stack-Overflow-Jobs"><a href="#Stack-Overflow-Jobs" class="headerlink" title="Stack Overflow Jobs"></a>Stack Overflow Jobs</h2><p>这个比较适合程序员来通过Stack Overflow上的工作板块寻找远程兼职工作，这个因为可以面向全球，你可以有选择有目标来进行投递，保持技术连续性，另外也发现一下国外都在做什么应用，我随便搜索了下android这个岗位，发现也是有不少的。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241228072021432" alt="图片"></p><p><em>也说下国内的相关平台吧，猿急送，程序员可以通过接单为客户提供定制开发，也可以通过查看需求自己是否来接单，猪八戒网，里面比较多各种门类，整体来说就是有人发需求有人来接，整体来看就是我之前讲的内外套路外行，互相糊弄的居多。</em></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>介绍这些小生意平台，不是鼓励大家都来接单赚钱，我觉得更多是帮助大家打开一些思路和点子，更好的结合自己优势和兴趣发现生意。</p><p><strong>把自己的一份时间和付出服务于更多的人，同时给自己带来盈利</strong>。之前有提过知识付费，现在也有一些这样的平台，也适合非互联网行业的人，大家都可以直接参与进去售卖所在行业知识和经验。</p><p>希望以上这些小平台能给大家带来一些观察和思考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几天写了一篇关于互联网人尽早找到自己一人能做的小生意，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464356058&amp;idx=1&amp;sn=4684f83f6a948c31eed382f2ccb</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="互联网副业" scheme="https://zhulg.github.io/tags/互联网副业/"/>
    
  </entry>
  
  <entry>
    <title>互联网人必备！draw.io：免费好用的作图神器</title>
    <link href="https://zhulg.github.io/posts/4b03ee24.html"/>
    <id>https://zhulg.github.io/posts/4b03ee24.html</id>
    <published>2024-12-27T03:43:07.000Z</published>
    <updated>2024-12-27T23:13:55.725Z</updated>
    
    <content type="html"><![CDATA[<p>今天要给大家推荐一个超级好用的作图神器——<strong>draw.io</strong>，特别适合各行各业，尤其是我们互联网行业的朋友们，简直是作图的必备工具。</p><p>为什么说它是神器？因为draw.io支持在线使用，不需要安装繁琐的软件，打开网页就能直接使用。如果你更喜欢在本地操作，它也提供了PC安装包。支持多种存储方式、可以本地导入导出，轻松导出为图片或其他文件格式。</p><p><em>最重要的一点，*</em>称之为神器的核心原因就是：功能强大、操作便捷，而且完全免费，无任何套路！***</p><p>对互联网人来说，无论是制作产品原型图、流程图、架构图，还是项目管理图，draw.io 都不在话下，轻松拿捏。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114611891.gif" alt="图片"></p><h2 id="1-下载或直接打开"><a href="#1-下载或直接打开" class="headerlink" title="1. 下载或直接打开"></a>1. 下载或直接打开</h2><p>在线使用直接打开网站<a href="https://draw.io/" target="_blank" rel="noopener">https://draw.io/</a> 即可，如果想把自己历史作图文件进行保存，建议和github一起来结合（我是一直这么使用），这样源文件也进行了保存。当然也支持多种存储方式。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114117602-20241227114612083" alt="图片"></p><p>如果想直接安装软件在自己的电脑上，去<a href="https://www.drawio.com/" target="_blank" rel="noopener">https://www.drawio.com/</a> 下载即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gCwibMtn41zOFqhI6m73wjiaN1HzGeGvl6DPLBQMvR4tLTwMrNRdLY9DPYQhwNRNvtQ6oJ6PrnjTW1iaiaDq8IYs0Q/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>你会从下载地址看到有windows、Mac版本，选择自己要下载的安装即可。</p><p>如果你想学习下构建这个桌面软件的源代码，也是可以的。从这个工程下可以链接到draw.io的代码（适合技术人员关注）</p><ol start="2"><li>轻松上手</li></ol><p>如果你喜欢使用本地版本，安装后打开可以设置语言，方便英语不熟悉的同学使用。下面这个图可以设置对应的语言选择。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118163-20241227114613565" alt="图片"></p><p>打开后可以创建作图，可以建立空白工程做图，也可以从模板里进行选择。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118351-20241227114613748" alt="图片"></p><p>以时序图为例，可以轻松拖拽，傻瓜式操作，到这你可能已经能看到很多比较漂亮的图，之前网上可能见到过的，这里面都有配图和操作。</p><p>下面这个图的效果是不是在一些技术博客经常看到，你可能不知道怎么做的，有这个工具你也就知道怎么做了。</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114118541-20241227114613988" alt="图片"></p><p>也提供有丰富的多种元素供添加和使用：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114614292" alt="图片"></p><ol start="3"><li>支持多种导出</li></ol><p>做好图后直接选择导出方式，可以把需要的图导到本地，导出的同时可以选择必要的设置，使导出的图更加漂亮一些。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gCwibMtn41zOibmicsRz1NEic8hV3XXm43AHkwEBLte78h6hv6LcjAYPGbTicibmpkVqseab98JEkpxBNUAopIIseCxQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>导出的一些效果图，这些是我之前的一些老图（看效果即可不用关注内容）</strong></p><p>技术细节时序图：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114614819" alt="图片"></p><p>商务类图：</p><p><img src="https://raw.githubusercontent.com/zhulg/allpic/master/640-20241227114119353" alt="图片"></p>]]></content>
    
    
    <summary type="html">推荐一款互联网人必备的免费作图工具——draw.io，支持在线使用和多种存储方式，适合制作流程图、架构图等。</summary>
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="作图工具" scheme="https://zhulg.github.io/tags/作图工具/"/>
    
  </entry>
  
  <entry>
    <title>从0到1，用Rust轻松制作电子书</title>
    <link href="https://zhulg.github.io/posts/4f00c682.html"/>
    <id>https://zhulg.github.io/posts/4f00c682.html</id>
    <published>2024-12-26T04:57:17.000Z</published>
    <updated>2024-12-26T12:20:41.459Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章《<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464356238&idx=1&sn=d22e9c4604c35adb11c714ff8754f45b&chksm=ffec490ec89bc018245032ac8b6cd2b5168f0d28e019123707e542836e6bb744b425891256cd&scene=21#wechat_redirect" target="_blank" rel="noopener">经济下行的时候，这些行业可能会更好</a>》中，我简单提到过用 Rust 做电子书，有收到读者朋友的私信，问怎么做电子书。今天正好有空，就来快速为大家做一个详细的介绍。  </p><p>制作电子书其实用途广泛，不仅可以用于技术文档、用户手册、教程等，还可以应用于文学创作。如果你有想法写小说或者做知识付费，电子书也是一个不错的切入点。特别是知识付费领域，通过小范围试水电子书，收集读者反馈，进一步打磨内容，最后也可以出版成书。</p><p>好了，有点扯远了，我们重点先说下怎么用Rust做电子书。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>我们准备用Rust来创建电子书，首先，需要安装有Rust的环境，Rust环境安装也比较简单打开官方地址，复制安装命令安装即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &apos;=https&apos; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><p>其次，需要对Markdown语法了解，如果不了解的可以看下，强烈推荐所有人来学。很多精美的排版和插图都可以通过md语法来实现，现在更有md的编辑器，稍微了解配合编辑器就能如虎添翼了。</p><p>如果有不熟悉markdown可以到这个网站来学习了解下，<a href="https://www.markdownguide.org/" target="_blank" rel="noopener">https://www.markdownguide.org/</a> ，也可以其他中文网站了解。</p><h2 id="2-安装使用"><a href="#2-安装使用" class="headerlink" title="2. 安装使用"></a>2. 安装使用</h2><p><strong>介绍下我们做电子书的主角mdBook，一款由rust实现的开源软件</strong>，可以进行文档生成，搜索，语法高亮，生产的电子书可以支持在PC、和移动设备打开使用。</p><p>通过cargo来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install mdbook</span><br></pre></td></tr></table></figure><p>安装成功，可以进行创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdbook init my-first-book</span><br></pre></td></tr></table></figure><p>创建过程中可以起名字，创建完成后到该文件目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-first-book</span><br><span class="line">mdbook serve --open</span><br></pre></td></tr></table></figure><p>打开地址<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> ，可以看到创建的电子书模板已经打开了，尽管内容还是空的，但电子书的结构已经有了，左边导航，右边文章内容，以及搜索框。</p><p>剩下就是我们写电子书的内容了。</p><h2 id="3-写电子书内容"><a href="#3-写电子书内容" class="headerlink" title="3. 写电子书内容"></a>3. 写电子书内容</h2><p>在创建的电子书工程下，会看到src文件目录、book.toml配置文件、book目录，我们先关注电子书的内容src目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── SUMMARY.md</span><br><span class="line">└── chapter_1.md</span><br></pre></td></tr></table></figure><p>SUMMARY.md 里打开可以看到就是左侧的导航配置，比如对应的章节配置在这个文件里，chapter_1.md就是对应的章节内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Summary</span><br><span class="line">- [Chapter 1](./chapter_1.md)</span><br></pre></td></tr></table></figure><p>可以对chapter_1.md进行内容写作，就可以形成对应的电子书的内容了。</p><p>比如这个我复制了个内容，修改了章节命名，然后重新刷新即可看到内容。</p><h2 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h2><p>电子书制作完后，编译后会发现在book的目录下会有编译好的文件，可以通过GitHub Pages上这样完全可以免费，也可以支持远程别人打开和阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464356238&amp;idx=1&amp;sn=d22e9c4604c35adb11c714ff8754f45b&amp;chksm=ffec490ec</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人必修课：锻炼自己的商业思维</title>
    <link href="https://zhulg.github.io/posts/adbd9bd2.html"/>
    <id>https://zhulg.github.io/posts/adbd9bd2.html</id>
    <published>2024-12-07T03:22:32.000Z</published>
    <updated>2024-12-07T03:27:36.128Z</updated>
    
    <content type="html"><![CDATA[<p>在技术人职业生涯中，前期大家一直崇拜技术，视技术为自己绝对的核心竞争力。这个没错，也是技术人的本分，但是技术人也要锻炼自己的商业思维。</p><p>“商业思维通常指在经营管理过程中，以市场作导向，以客户需求为中心，将资源、产品或服务转化为可持续商业价值的方法的能力”。</p><h2 id="那技术人的商业思维是什么？"><a href="#那技术人的商业思维是什么？" class="headerlink" title="那技术人的商业思维是什么？"></a><strong>那技术人的商业思维是什么？</strong></h2><p>直白点来讲，就是能看透并利用技术产生商业价值，让技术从幕后到前台，用技术赚到钱的思维能力。当然这个前提是合法合规，不能歪门邪道，否则不叫商业思维，叫非法谋取利益。</p><p>为什么技术人要锻炼商业思维呢，因为利用好自身技术并结合商业思维更能理解赚钱路子。具备商业思维不仅能帮助你理解好公司产品和业务模式。对后续自己创业或者开启副业都有帮助。</p><p>有没有遇到过这种情况，想必一定有的，比如：刚搭建好的系统架构和模块设计，突然业务需求或者市场模式发生了变化，不得不改造及扩展。有时改动还比较大，想想为什么，市场的本质就是变化和波动，我们设计的模块是不是符合真实业务和商业模式？早期做打车平台设计只有出租车，后边有了快车、专车，豪华车等等车型运营，技术平台设计也就要扩展适配运营。这些其实不仅仅是技术上的问题，更是你对业务和商业思维的缺乏思考，没有一定的商业思维和意识，技术设计也会存在局限性。</p><p>在公司还有一些试错成本，那如果自己出来创业呢，只有技术，没有商业思维，那创业想必也是必死无疑。</p><h2 id="从小事上培养商业思维"><a href="#从小事上培养商业思维" class="headerlink" title="从小事上培养商业思维"></a>从小事上培养商业思维</h2><p>我们做技术的很容易陷入到技术和代码的“死胡同”，埋头苦干却缺少抬头看路的情况，同样商业思维的锻炼应该是从身边的小事或者从自己实现的产品里多一些观察和思考，刻意锻炼自己的商业思维敏感度。</p><p>举个例子，吃饭时候观察下那些生意火爆的店都常常存在排队，那他们火的原因是什么，好吃？一定有这个因素，但肯定还有其他的，地段、定价、口碑，营销、服务等等，能否分析和总结出这些小店的成功因素。你去理发店可能会更有感触，理发店核心是做出漂亮的发型，同样除核心竞争力还有哪些因素促使一家店经久不衰，这些背后因素能否发现或者正确找出成功关键点，逐渐培养自己对商业机会的敏感度。</p><p>当前短视频和直播带货也比较热，有没有想过，这背后是不是有一整套的商业逻辑和生态，在如此火热的时代下，作为技术人，你有哪些思考。</p><p>自己也加入视频创作和直播？不反对，但是你可能也知道现在做的成功概率及能否做的起来。</p><p>用技术人的商业思维，应该是如何服务这些群体。</p><p>就犹如刘强东先生之前说过，大部分中国人赚钱方式别人怎么做，我也来跟。记得他举了个”犹太人开加油站的故事“，别人是通过有了一家加油站后，做了加油站旁边的配套项目，而不是我们看到加油站赚钱，就跟风在旁边都开起加油站来。。。</p><p>如果我们不思考，不具备一定商业思维，直接跟进，那就和上边例子一样，况且自己不擅长也肯定赚不到钱。</p><p>那我们技术人正确思维和做法是利用技术优势做为他们生态提供者参与进来，做配套项目，做衍生产品，这样你前期独一份的时候就能快速赚到钱。</p><h2 id="从实际工作中切入锻炼"><a href="#从实际工作中切入锻炼" class="headerlink" title="从实际工作中切入锻炼"></a>从实际工作中切入锻炼</h2><p>从自己的工作场景和项目中找到切入点，锻炼自己商业思维，先从小的、具体的业务问题入手。比如，想想你所参与的项目，它服务的目的是什么？用户需要什么？公司是怎么靠这个项目盈利的？需求背后原因是什么？</p><p>这些问题看似基础，但往往被我们技术人所忽视，当你开始思考这些问题的时候，其实就是在培养商业思维了。</p><p>理解公司如何运作，客户为什么愿意为你的技术方案买单，是商业思维的第一步。通过参与项目需求讨论，多和产品、市场同事沟通，逐渐摸清业务背后的逻辑。这里要啰嗦下，我们技术人有时不愿意和市场或者销售来做更多沟通大家语言多少有些不理解，但技术人想让自己提升，想锻炼商业思维，就要多接触市场这些人，多聊对自己打开技术外的思维非常重要。</p><p>如果上边能做到理解和领悟，那你在实施中通过让技术和商业目标结合就会更加合理和自然，你可以提出改进建议，不仅仅是基于技术上的提升，还要考虑这个改进能不能为公司带来更多收益或降低成本。或者，在开发新功能时，提前想到客户需求的变化，设计更灵活、可扩展的架构。这些都是用技术去服务商业的实际例子，这些做对了公司不仅降本增效，自己的商业思维和技术结合的能力也就大大提升。</p><h2 id="技术和商业双向奔赴"><a href="#技术和商业双向奔赴" class="headerlink" title="技术和商业双向奔赴"></a>技术和商业双向奔赴</h2><p>作为技术人，其实商业思维和技术能力是相辅相成的。你会发现，当你具备了商业思维之后，原本那些看似枯燥的项目、代码实现逻辑，他们背后都藏着商业逻辑和运营管理因素。</p><p>有了商业思维，做技术决策时就避免埋头苦干，而是能更清楚地知道，为什么要这么设计？为什么要花这么多时间优化？项目的商业价值在哪里？钱到底是怎么赚的？这些问题不再模糊，而是变得具体起来。</p><p>平日里还要多跟非技术背景的人交流，这点也很重要。他们的想法往往能帮你跳出技术的框架，拓宽你的视野。无论你是准备自己创业，还是继续在公司深耕，商业思维加上技术的组合拳，能让你在任何情况下都游刃有余。</p><p>如果你一直关注自己商业思维锻炼，你会慢慢发现一些商机，也就知道如何用技术以及该不该把它来实现，这样一来，你的职业选择和发展空间也会越来越广阔。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在技术人职业生涯中，前期大家一直崇拜技术，视技术为自己绝对的核心竞争力。这个没错，也是技术人的本分，但是技术人也要锻炼自己的商业思维。&lt;/p&gt;
&lt;p&gt;“商业思维通常指在经营管理过程中，以市场作导向，以客户需求为中心，将资源、产品或服务转化为可持续商业价值的方法的能力”。&lt;/</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>后端工程师，必须掌握的8大技能</title>
    <link href="https://zhulg.github.io/posts/f82f20d4.html"/>
    <id>https://zhulg.github.io/posts/f82f20d4.html</id>
    <published>2024-12-02T11:11:05.000Z</published>
    <updated>2024-12-02T11:36:20.010Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章介绍过全栈工程师的练就之路，《<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&mid=2464355691&idx=1&sn=4f844933f98a26df0992a16f30af0a6e&chksm=ffec4bebc89bc2fde8d84f77d52a00e17c819cf5690add8433c658f39ee1b5da223fdad3766b&scene=21#wechat_redirect" title="全栈工程师，练就之路：如何学，如何做" target="_blank" rel="noopener">全栈工程师，练就之路：如何学，如何做</a>》今天展开来看下，最近几年比较流行的后端开发技能，也看看还有哪些没有掌握的后端技能。</p><h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1. 编程语言"></a>1. 编程语言</h3><p>适合后端开发的编程语言，也是目前比较应用广泛的， <strong>Java、GO、Python、Rust 我推荐这4种，</strong>但也有node.js 和PHP、Kotlin这些（毕竟今天我主要讲主流和流行的后端技能）也有一些应用在使用，目前占比不大。</p><p>java后端开发尤其是Spring框架下还是被大量应用所使用，GO因其高并发性能，在微服务和高并发场景下广泛使用，python不仅在脚本使用，大量AI和机器学习类也广泛应用。rust在后端方面以安全和高性能著称，在后端、区块链应用也有巨大优势。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_1.png?raw=true" alt></p><p>2. API相关开发</p><p>具备能对接口设计和开发的能力，能对业务进行抽象定义，把业务转为为数据结构和表结构的设计能力。</p><p><strong>RESTful API ,设计清晰、易扩展的API接口</strong></p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_2.jpeg?raw=true" alt></p><p><strong>gRPC：适合高性能微服务通信，是开源的远程过程调用（RPC）框架</strong></p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_3.png?raw=true" alt></p><p><strong>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。</strong></p><h3 id="3-数据库相关技能"><a href="#3-数据库相关技能" class="headerlink" title="3. 数据库相关技能"></a>3. 数据库相关技能</h3><p><strong>关系型数据库</strong>：肯定是MySQL、以及PostgreSQL、Oracle等关系型数据库，具备理解SQL语法、查询优化和数据库设计核心技能。<strong>其他的NoSQL数据库</strong>：如MongoDB、Redis、Cassandra等，适合处理大规模数据、高并发读写。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_4.jpeg?raw=true" alt></p><h3 id="4-框架化应用技能"><a href="#4-框架化应用技能" class="headerlink" title="4. 框架化应用技能"></a>4. 框架化应用技能</h3><ul><li><p>• Spring Boot/Cloud (Java)：用于快速构建独立、生产相关Spring的应用，应用最广泛的框架</p></li><li><p>• Django/Flask (Python)：一个全功能和轻量级的Web框架，适用于python开发</p></li><li><p>• Express (Node.js)：简洁且强大的Web框架，也比较常用</p></li></ul><ul><li><img src="https://github.com/zhulg/allpic/blob/master/server_2024_5.jpeg?raw=true" alt></li></ul><h3 id="5-消息队列系统技能"><a href="#5-消息队列系统技能" class="headerlink" title="5. 消息队列系统技能"></a>5. 消息队列系统技能</h3><p><strong>RabbitMQ</strong> 其设计偏向于消息传递的可靠性和灵活性，RabbitMQ 以队列为中心，消息通过交换器（Exchange）发送到不同的队列。</p><p><strong>Kafka</strong> 一个分布式流式处理平台，基于Zookeeper协调的分布式消息系统，可以实时发布、订阅、存储和处理数据流，适用于大规模数据处理和日志管理。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_6.png?raw=true" alt></p><h3 id="6-docker容器化技术"><a href="#6-docker容器化技术" class="headerlink" title="6.docker容器化技术"></a>6.docker容器化技术</h3><p>Docker 容器化技术，能够创建、管理和部署容器化应用，简化了应用环境配置问题，打包成为镜像。</p><p>Kubernetes 用于大规模容器编排和管理</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_7.jpeg?raw=true" alt></p><h3 id="7-代码管理和自动化部署类"><a href="#7-代码管理和自动化部署类" class="headerlink" title="7.代码管理和自动化部署类"></a>7.代码管理和自动化部署类</h3><p>Git命令后操作、GitHub、GitLab 的使用。</p><p>CI/CD工具,如Jenkins、GitLab CI，能够持续集成与交付。</p><p>自动化部署类，熟悉AWS、Azure、Google Cloud等云服务，这块其实有部分是和运维同事重叠的技术能力，了解即可。</p><p><img src="https://github.com/zhulg/allpic/blob/master/server_2024_8.jpeg?raw=true" alt></p><h3 id="8-架构、性能、安全类技能"><a href="#8-架构、性能、安全类技能" class="headerlink" title="8.架构、性能、安全类技能"></a>8.架构、性能、安全类技能</h3><p>这类技能要根据具体的编程语言、应用规模相结合在整体来做，并在日常中学习和锻炼的技能。</p><p>架构类，如何架构微服务、单体架构的区别与使用场景，具体开发中的设计模式应用，架构原则的遵循。</p><p>应用中性能的调优，数据库查询和缓存的优化，对组件安全方面合理选择，语言和框架安全类的日常关注、能从整体考虑系统的扩展、健壮性的掌控能力。</p><p>其他一些技能在后端开发中，日常问题的分析和定位能力，如何通过问题发现架构和设计的本质缺陷。</p><p>如何优化分层和系统设计降低应用耦合，如何通过上线前合理规划架构和设计，上线后的日志监测和报警、服务的自恢复、降级策略的制定。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>后端的技能也在不停迭代和更新，熟练运用现在比较流行的后端技术，清楚知道使用场景，并保持学习，从整体上来用合适的技术选择结合业务场景来确保后端服务的稳定，并保持自己在后端技术迭代升级。</p><p><strong><em>PS: 也欢迎大家评论和交流~ 更多文章也可关注微信公号：良技漫谈</em></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的文章介绍过全栈工程师的练就之路，《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNDA3MzA3MQ==&amp;mid=2464355691&amp;idx=1&amp;sn=4f844933f98a26df0992a16f30af0a6e&amp;c</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>失业潮下，互联网人如何面对，给自己留好后路</title>
    <link href="https://zhulg.github.io/posts/80da3ca2.html"/>
    <id>https://zhulg.github.io/posts/80da3ca2.html</id>
    <published>2024-12-02T01:49:36.000Z</published>
    <updated>2024-12-02T01:51:17.623Z</updated>
    
    <content type="html"><![CDATA[<p>在全球经济下行的大背景下，失业潮正以不可阻挡的势头席卷而来，任何行业都很难幸免。</p><p>互联网行业，曾经风光无限，如今也显得步履维艰。随着基建生态成熟，资本退潮，市场存量博弈愈发激烈，裁员的阴影也笼罩着一线大厂。从阿里的“瘦身”到腾讯的“断臂”，一波波暗流涌动的裁员潮已在行业内频繁上演，小公司的日子就更不必多言。</p><p>面对这样的现实，越来越多的互联网人被迫直面失业，身边的同事、朋友大家也不把失业当成需要隐瞒的秘密，而是大家互相调侃，并能冷静应对的常态。</p><p><strong>当失业情况成为常态，我们该如何面对、以及如何为未来做好准备，给自己留好退路。</strong></p><h2 id="冷静面对提前规划"><a href="#冷静面对提前规划" class="headerlink" title="冷静面对提前规划"></a>冷静面对提前规划</h2><p>先看一组网上相关数据情况，作为参考。仅在2023以来，阿里巴巴、腾讯、百度，字节、京东企业的裁员人数已超过数万，在有一些中小互联网，数据可能比这个要多。这里面无论你是资深技术专家还是初入职场的新人，可能都无法置身事外，这个曾经风光无限的行业，如今正遭遇前所未有的寒冬。</p><p>失业，特别是突如其来的裁员，往往让人猝不及防，在面对这场互联网行业的“生存游戏”时，最重要的是保持冷静，接受变化。互联网行业的周期性波动早已不是新闻，失业不过是其中的一部分。与其一味抗拒，不如学会接受现实，并将其视为一次重新出发的机会。</p><p>提前规划经济生活确保稳定，避免高负债，谨慎对待信用卡、贷款等消费方式，确保自己有足够的紧急储蓄，以应对未来几个月的生活支出，让自己保持不慌 ，如果有房贷这个可能要考虑能否提前偿还一部分，减少月供，毕竟现在利率存款也很低（提前还贷这块仅个人建议，慎重参考）</p><p><strong>经济上的从容，可以在失业时，给我们不慌的勇气，可以有时间去调整和重新规划未来。</strong></p><h2 id="打造自己“不可替代性“"><a href="#打造自己“不可替代性“" class="headerlink" title="打造自己“不可替代性“"></a>打造自己“不可替代性“</h2><p>面对失业潮，唯一不变的就是不断提升自我，增强自身在职场上的竞争力。互联网行业瞬息万变，只有持续学习和更新技能，才能在这个残酷的行业中保持“不可替代性”。</p><p>这里不可替代性，不是指让技术做防御性代码编程，让产品做互撕，做部门刺头对做外沟通、互抢资源，这些low的操作，也是不提倡，也不会长久，害人害己。</p><p>不可替代是要跟随公司业务，积极尝试利用新技术提升自己和公司效率，比如多接触AI、区块链、大模型如何为公司业务结合和创新，多学习产品思维，商业思维为业务出谋划策，同时深入到技术深水区，解决其他人无法搞定的事情技术或者能力，无论你是技术、产品、运营、设计，是否具备自己是支柱的能力，没有就向公司支柱者学习，打造不可替代性。</p><h2 id="副业B计划"><a href="#副业B计划" class="headerlink" title="副业B计划"></a>副业B计划</h2><p>如果今天通知你裁员离岗， 明天你是否有有自己的副业、有自己工作的B计划、谋生的后路？</p><p>大家都困难的时候，也往往会有新领域进入的机会，发挥自己的优势，能否多次出卖自己时间的能力，我写的有篇找到自己能做的生意就是这个意思。自媒体、直播，技能分享、结合新模式让自己经验技能服务更多人，换来自己的副业。</p><p>如果你在互联网行业待的久，也积累了一定的行业经验和资源，不妨考虑创业。但要注意少投入交学费心态来进行，即便失败不影响自己生活。互联网低门槛、高传播性加上自己在这个圈子的技术、产品、资源的理解，也是尝试的，在寒冬的同时也一定有新的模式和机遇产生，也许是你找到新的大陆。</p><h2 id="学习提升认知"><a href="#学习提升认知" class="headerlink" title="学习提升认知"></a>学习提升认知</h2><p>积极参与技术社群、线上线下的行业活动，适当扩展自己在行业的影响力。这个时代不营销自己，会很吃亏。这个只有自己吃过亏，你才能真正理解我说的，毕竟我曾经也吃过。</p><p>向身边优秀的人学习，他们的思路和认知可能一针见血能帮忙你指点迷津，有些问题和困难在自己的认知层面你是找不到答案的。</p><p>可以多请教行业内资深人事，保持沟通，了解行业趋势与动向。通过他们的经验与建议，你可以更好地规划未来的发展方向。</p><h2 id="保持平常心"><a href="#保持平常心" class="headerlink" title="保持平常心"></a>保持平常心</h2><p>往往行业困境中也一定蕴藏着新的生机，如果我们尽早做好准备、持续提升，失业潮不仅仅是一场挑战，更是一次重新审视自身、调整发展方向的契机，我之前文章专门写过。</p><p>相信再漫长的冬季也终将过去，而春天的曙光必然会到来。保持平常心，熬过寒冬，未雨绸缪，给自己留好退路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在全球经济下行的大背景下，失业潮正以不可阻挡的势头席卷而来，任何行业都很难幸免。&lt;/p&gt;
&lt;p&gt;互联网行业，曾经风光无限，如今也显得步履维艰。随着基建生态成熟，资本退潮，市场存量博弈愈发激烈，裁员的阴影也笼罩着一线大厂。从阿里的“瘦身”到腾讯的“断臂”，一波波暗流涌动的裁员</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人必读：在数字化转型中如何为企业赋能</title>
    <link href="https://zhulg.github.io/posts/7c7de3fd.html"/>
    <id>https://zhulg.github.io/posts/7c7de3fd.html</id>
    <published>2024-11-27T15:08:23.000Z</published>
    <updated>2024-11-27T15:11:39.619Z</updated>
    
    <content type="html"><![CDATA[<p>在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。数字化的核心是思维方式的改变，而不是简单的工具更新。</p><h2 id="一，-技术驱动数字化转型的关键角色"><a href="#一，-技术驱动数字化转型的关键角色" class="headerlink" title="一， 技术驱动数字化转型的关键角色"></a>一， 技术驱动数字化转型的关键角色</h2><p>数字化转型的成败并非单纯的技术问题，但技术确实是其中不可或缺的推动者。技术的作用不仅仅是优化系统，更在于帮助企业将业务模式和技术手段紧密结合，实现降本、增效、提质，并最终反哺业务成长。</p><p>作为技术人，参与数字化转型的核心在于具备数字化思维和技术素养，同时深入了解企业的业务需求，找到技术与业务的最佳结合点。这不仅需要对现有业务的深度理解，更需要在转型过程中，通过技术手段推动企业向前发展。</p><h2 id="二，技术如何赋能企业数字化转型"><a href="#二，技术如何赋能企业数字化转型" class="headerlink" title="二，技术如何赋能企业数字化转型"></a>二，技术如何赋能企业数字化转型</h2><p>技术的价值往往体现在业务结果上。如果我们从业务结果倒推，哪些因素会影响业务的成功？这些就是技术人员需要重点关注并优化的环节。以下是我认为技术在数字化转型中能够发挥作用的几个关键领域：</p><h3 id="1-生产和销售链路的优化"><a href="#1-生产和销售链路的优化" class="headerlink" title="1. 生产和销售链路的优化"></a>1. 生产和销售链路的优化</h3><p>生产和销售环节往往是一个比较重要的，直接与公司的收益最相关，这种存量业务模式相对成熟且重复性较高，技术可以通过自动化、智能化手段来降低成本、提高效率。比如，使用技术为销售人员提搞客户识别、跟踪、获客、销售分析等等，生产过程中用技术改造流程，AI识别协助等，通过技术投入从而大幅提升企业的市场竞争力。</p><h3 id="2-产品服务价值的提升"><a href="#2-产品服务价值的提升" class="headerlink" title="2. 产品服务价值的提升"></a>2. 产品服务价值的提升</h3><p>产品服务价值链的延伸是技术发挥创新力的另一个重要领域。技术不仅能帮助企业优化现有产品，还能通过技术创新扩大服务的增量空间。例如，利用技术优化客户服务体验、提升品牌价值，以及实现企业社会责任目标，这些都能够为企业带来长期的市场效益。</p><h3 id="3-企业智能化体系的建设"><a href="#3-企业智能化体系的建设" class="headerlink" title="3. 企业智能化体系的建设"></a>3. 企业智能化体系的建设</h3><p>企业智能化体系是数字化转型的核心，也是技术最为集中发挥作用的领域。从基础设施建设到云服务、大数据、人工智能的应用，技术人员不仅需要实现企业现有业务的数字化，还要建立一个智能化的生态系统，内部链接员工，外部连接客户与合作伙伴，实现真正的互联互通与数据驱动决策。</p><p>数字化转型是一个复杂而长期的过程，企业必须根据实际情况，分阶段推进智能化建设。技术人在这个过程中，需要明确自己的阶段性目标，确保每一步都为企业的长远发展提供技术支持。</p><h2 id="总结：定位与价值"><a href="#总结：定位与价值" class="headerlink" title="总结：定位与价值"></a><strong>总结：定位与价值</strong></h2><p>归根结底，技术人的价值在于如何通过降本、增效、提质和反哺来助力企业成长。降本增效方面，技术通过合理的资源配置和数据化管理，帮助企业优化决策；在提升质量方面，技术可以通过数据分析、产品检测等手段，确保业务的高效运行；而反哺业务的关键，则在于如何利用大数据和AI等先进技术手段，从沉淀的数据中提取洞察，助力业务持续增长。</p><p>数字化转型是企业发展的必经之路，技术人也应当在这个过程中找到自己的定位，发挥最大价值，推动企业在新时代中实现新的突破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当下，数字化转型已成为众多企业生存与发展的关键路径。这不仅仅是工具或流程的变革，更是企业在思维认知上的彻底转型。数字化的核心是思维方式的改变，而不是简单的工具更新。&lt;/p&gt;
&lt;h2 id=&quot;一，-技术驱动数字化转型的关键角色&quot;&gt;&lt;a href=&quot;#一，-技术驱动数字化转型</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>互联网技术人表达力提升：3个珍藏方法，快速见效！</title>
    <link href="https://zhulg.github.io/posts/da6a9067.html"/>
    <id>https://zhulg.github.io/posts/da6a9067.html</id>
    <published>2024-11-27T14:46:19.000Z</published>
    <updated>2024-11-27T14:50:19.973Z</updated>
    
    <content type="html"><![CDATA[<p>在技术的世界中，逻辑是至高无上的法则；而在现实中，表达能力则是成功的关键。</p><p>互联网技术人员在与他人沟通时，常常听到被戏称为“说人话”或“听不懂”。这种现象反映出他们在表达中使用了过多的技术术语和专业痕迹，而又缺乏必要的表达锻炼，导致外行人难以理解。</p><p>尤其在与业务人员和运营人员的沟通中，缺乏产品人员的协作，问题更为突出。</p><p><strong>互联网技术人，如果想在职业生涯中全方位提升自己，其中表达能力也是重要的软实力，他也等同于你的技术硬实力，二者都要强，尽量不要存在短板。</strong></p><p>无论在技术团队管理中，或者自己技术答辩、日常工作与业务和产品人员沟通中，良好的表达能力都会帮助推动项目进展，赢得支持。当然互撕除外，话说回来，就算互撕，你是不是也要有很好的表达能力，不至于说出的话，让别人无法信服吧。</p><p>自己也是从一线技术小白一路摸索过来，到带领技术团队后，很多技术人身上也看到过自己当年的身影，特别在表达这块，或多或少是技术理工男的天性，大家都不擅长表达。在团队内也常分享或者逼迫他们去表达自己，从讲解技术入手，组织定期轮流分享来锻炼大家表达能力。</p><p>除此之外，也分享自己摸索的锻炼表达能力的方法，这些适用于所有人。（特别使用互联网技术人，因为我曾经也是纯粹的技术男，也是这样锻炼自己的，不妨试一试）</p><h2 id="方法一：刻意总结和提炼"><a href="#方法一：刻意总结和提炼" class="headerlink" title="方法一：刻意总结和提炼"></a>方法一：刻意总结和提炼</h2><p>这个可能很多人知道这个道理，但不一定会实战，或者总结不出来核心东西。其实，道理很简单，如果别人给你讲了一个故事，一个事情、一部电影、一项技术等等。你能否从他们讲的故事中总结出来他要表达的东西？</p><p>你可能会用几个短语来描述，或者又开始长篇叙述，一定是这样的，不信你可以试一试？（这些都不是好的表达方式）</p><p>刚开始，可以把这个故事进行提炼，用自己的表达方式在2，3句话内，抓住重点来总结，如果说不明白，那就尝试写下来，用文字来表达出来。然后与这个故事或事情的讲述人来核对看看。</p><p>反复锻炼，自己的表达能力无形中就会提升。</p><h2 id="方法二：多阅读写思考"><a href="#方法二：多阅读写思考" class="headerlink" title="方法二：多阅读写思考"></a>方法二：多阅读写思考</h2><p>道理很简单，就是鹦鹉学舌。</p><p>绝大部分人没有一开始就特别会表达，天赋除外，多阅读是最有效锻炼自己表达能力的方式，看起来一个是读，一个是说有点不相关。</p><p>事实并非如此，在阅读别人的文章时候，有可能写的内容你是知道的，比如，对于技术人来说，如果一篇技术文章你也知道原理，但是能否表达的跟别人写出来的文字表达更通俗易懂，好的文章一定是读完豁然开朗，这里面也一定有优秀的表达艺术。</p><p>从阅读中，看别人怎么表达，同样一句意思，别人用的为何如此恰到好处，模仿和学习这些文字的表达方式。阅读后，把自己的思考和想法写下来，坚持写思考和想法。</p><p>阅读多了知道别人怎么表达，思考写多了就把自己的表达思维也就更加清晰了，我记得TED上也有人分享过类似的方法。</p><h2 id="方法三：借助AI-工具"><a href="#方法三：借助AI-工具" class="headerlink" title="方法三：借助AI 工具"></a>方法三：借助AI 工具</h2><p>这个是最近发现非常高效的方法，无论是总结提炼还是你自己写文章，ChatGPT有个强大的能力，优化语句，这个其实在锻炼自己表达时非常有帮助。</p><p>你可能满头大汗写了自己的总结、发言稿、分享材料，可能写的过程中你自己都觉得不通顺、词不达意，更何况这东西是你要表达给别人的。。。没关系，先自己写出来。</p><p>写完后，把自己的草稿文字和要表达的要求告诉GPT来协助优化，来看看他对某段话的表达方式，跟你草稿区别在哪里，问什么他优化的更通顺。</p><p>通过对比和取舍你应该能从中学到好的表达方式，这个对表达的提升非常有帮助，与此同时也要注意防止AI的机器化，否则你的文章可能是空洞和无味，要学会取长补短的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在技术的世界中，逻辑是至高无上的法则；而在现实中，表达能力则是成功的关键。&lt;/p&gt;
&lt;p&gt;互联网技术人员在与他人沟通时，常常听到被戏称为“说人话”或“听不懂”。这种现象反映出他们在表达中使用了过多的技术术语和专业痕迹，而又缺乏必要的表达锻炼，导致外行人难以理解。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>2024年Rust的八大应用领域</title>
    <link href="https://zhulg.github.io/posts/7c9bf2c4.html"/>
    <id>https://zhulg.github.io/posts/7c9bf2c4.html</id>
    <published>2024-09-18T06:22:48.000Z</published>
    <updated>2024-09-18T06:44:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>Rust的八大用途你了解多少呢？| 良技漫谈<br>介绍下Rust的主要应用场景，特别是第8点目前也有不少在应用。</p><h2 id="1-系统编程："><a href="#1-系统编程：" class="headerlink" title="1. 系统编程："></a>1. 系统编程：</h2><p>Rust 因其内存安全性和高性能，适用于开发 操作系统、设备驱动、底层库和系统服务。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/63.png"></div><h2 id="2-高性能网络开发："><a href="#2-高性能网络开发：" class="headerlink" title="2. 高性能网络开发："></a>2. 高性能网络开发：</h2><p>Rust 常用于构建 高性能、低延迟的网络服务器和分布式系统。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/64.png"></div><h2 id="3-嵌入式与物联网-IoT-："><a href="#3-嵌入式与物联网-IoT-：" class="headerlink" title="3. 嵌入式与物联网 (IoT)："></a>3. 嵌入式与物联网 (IoT)：</h2><p>Rust 的资源效率和跨平台特性，使其非常适合用于开发嵌入式设备固件和物联网应用。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/65.png"></div><h2 id="4-WebAssembly和前端开发："><a href="#4-WebAssembly和前端开发：" class="headerlink" title="4. WebAssembly和前端开发："></a>4. WebAssembly和前端开发：</h2><ul><li>支持将代码编译成 WebAssembly (Wasm)，在浏览器中以接近原生速度运行，适合开发高性能前端Web 应用和浏览器扩展。</li></ul><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/66.png"></div><h2 id="5-命令行工具开发-CLI-："><a href="#5-命令行工具开发-CLI-：" class="headerlink" title="5. 命令行工具开发 (CLI)："></a>5. 命令行工具开发 (CLI)：</h2><p>Rust 的高效性能和良好的跨平台支持，使其成为开发命令行工具 (CLI) 的理想语言，最近也有很多基于rust重新的好佣的命令行工具。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/67.png"></div><h2 id="6-区块链与加密货币："><a href="#6-区块链与加密货币：" class="headerlink" title="6. 区块链与加密货币："></a>6. 区块链与加密货币：</h2><p>Rust 因其内存安全性和高并发处理能力，被广泛应用于区块链技术开发，包括智能合约、加密钱包、去中心化交易平台。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/68.png"></div><h2 id="7-游戏开发："><a href="#7-游戏开发：" class="headerlink" title="7. 游戏开发："></a>7. 游戏开发：</h2><p>Rust 的 并发处理和图形处理能力，使其在高性能跨平台游戏开发中表现出色。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/69.png"></div><h2 id="8-其他领域："><a href="#8-其他领域：" class="headerlink" title="8. 其他领域："></a>8. 其他领域：</h2><p>Rust 在桌面应用、跨平台移动端底层组件开发、人工智能 (AI)、数据科学和音视频处理等领域逐渐得到应用，以完全和高效性能被广泛多领域选用。</p><div align="center" width="100%">  <img width="50%" src="https://raw.githubusercontent.com/zhulg/allpic/master/70.png"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Rust的八大用途你了解多少呢？| 良技漫谈&lt;br&gt;介绍下Rust的主要应用场景，特别是第8点目前也有不少在应用。&lt;/p&gt;
&lt;h2 id=&quot;1-系统编程：&quot;&gt;&lt;a href=&quot;#1-系统编程：&quot; class=&quot;headerlink&quot; title=&quot;1. 系统编程：&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Rust" scheme="https://zhulg.github.io/categories/Rust/"/>
    
    
    <category term="Rust" scheme="https://zhulg.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>用2个重要途径，打造自己技术影响力</title>
    <link href="https://zhulg.github.io/posts/c0234e14.html"/>
    <id>https://zhulg.github.io/posts/c0234e14.html</id>
    <published>2024-09-06T08:32:19.000Z</published>
    <updated>2024-09-06T08:34:25.312Z</updated>
    
    <content type="html"><![CDATA[<p>对于绝大多数技术人来说，往往会忽略自己在行业里的影响力，更多是埋头在自己所在的技术领域里，专注于解决具体问题、提升技术能力。</p><p>然而，在现在高速发展且高度内卷的时代下，单纯拥有技术实力可能并不足以让你脱颖而出，亦或许在短期内有不错的成就，但如果没有影响力支持，这些成绩也可能难以转化为持续的发展优势。</p><p>影响力对技术人来说，实际上是一种无形的资产。它不仅能为你带来更多的机会，还能激励你不断学习和提升自己。</p><h2 id="技术影响力"><a href="#技术影响力" class="headerlink" title="技术影响力"></a>技术影响力</h2><p>技术影响力都有哪些 ，本质是什么。 </p><p>技术影响力可以是行业内的关注度，能否被行业里大家所熟知，技术相关点能否被大家认同，技术方案能否被大家认同等。其本质是技术影响力能否被影响他人决策和思考的能力（当然是最佳实践方面相关）</p><p>例如，通过对某一技术的深入理解和讲解，你可以在技术圈内扩大自己的影响力。这种影响力不仅可以在团队或公司内部建立权威和信任，还能在更广泛的社区中得到认可，进而形成对你个人品牌的强大支持。</p><h2 id="如何打造影响力"><a href="#如何打造影响力" class="headerlink" title="如何打造影响力"></a>如何打造影响力</h2><p>持续输出和分享有价值的内容，技术使用，问题分析和定位、架构设计和思考。</p><p>尝试下写作和演讲。</p><p>写作的锻炼可以从技术文档的翻译，技术方案的整理，能否被别人轻易理解和认同代表着自己写作表达和总结能力的提升，持续写作和输出。而当你逐渐掌握了写作的技巧，原创内容的输出将成为你个人品牌的一部分 。有时你会的技术和你涉及的技术方案，不一定能用文字很好的写的出来，写的出来不一定能让其他人看的懂知道你在说什么。不信的话，你可以尝试来写下，一个好的技术文档输出也绝对需要多次的打磨的。</p><p>我们写作时用心投入，结合例子让别人能快速理解，是自己的原创，不要一顿操作和转载，自己也没有消化。要对内容负责，坚持这样的写作态度才能吸引并引起读者的共鸣。还有个技巧，当写作的时候看看能否用一句最少得字数，清晰的表达出对应的技术方案，这些锻炼都有助于对文字总结概括能力的培养，我们称之为”能写“。写作的平台上可以自己建立博客，公众号、视频媒体等，看自己喜欢那种。也不要把时间对花在了影响力打造上，这样你技术钻研的时间也会很少，会变成技术人眼中的”很能说“，要追寻技术和影响力的平衡点。</p><p>技术人演讲，不仅能把自己技能分享输出扩大自己影响力，演讲的准备工作也是对自己知识点提升的重要手段，绝对是一举得到的收益。演讲不仅需要对掌握的知识的概括和总结，还需要有良好的表达能力。要成为一名优秀的技术演讲者，关键在于反复练习和精心准备，那种表达是别人容易听懂的，哪些是不需要反复啰嗦，需要精简的，如何在有效限的时间内，提炼出最核心的内容，并用简洁有力的语言表达出来。也可以多听下别人的演讲，比如TED上技术人演讲，学习他们的表达方式和逻辑结构，从魔法加自己的练习，敢于在公众面前发表自己的技术观点，可以在小组内进行技术分享，公司呢，外部社区，慢慢就会提高自己的技术演讲能力了。另外，每次在演讲后自己可以从侧面关注下听众的反馈，复盘自己的演讲，哪些点讲的不好，哪些地方需要观众互动，那个例子举的还不够贴近等等，复盘是为了下次更好。</p><h2 id="长期主义"><a href="#长期主义" class="headerlink" title="长期主义"></a>长期主义</h2><p>打造自己的技术力一定是从小范围开始并努力扩大，同时也是一件需要技术人坚持的长期主义。</p><p>有时我们被工作压的没有时间进行自我总结和分享，就更别谈尝试做技术影响力的事情了，能把当天工作做完就不错了。但作为技术人我们需要把抽时间来把自己影响力，自己的技术品牌持续维护起来，这样才能让让自己进入良性循环，毕竟除了上班打工也要把自己技能让等多人知道，为后续自己副业和人脉做准备。</p><p>影响力的积累是一个长期的过程，需要耐心和毅力，无论是进行写作还是一些演讲或者公开教程，都需要一点点积累，持续分享和帮助更多的人，把这件事作为长期主义来坚持。即使短期内效果不显著，也不要放弃。坚持做正确的事情，将影响力转化为职业生涯的强大助力，也是每个技术人应当追求的目标。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>影响力的建立是技术人职业发展的关键环节，它不仅反映了个人的价值，也总结和传递了自己的知识和经验，同时也是技术宣传的重要手段。每一次用心的输出和分享，都是在帮助更多的人。</p><p>真正的影响力，也不在于一朝一夕，而在于我们在不断成长中，始终如一的付出与坚持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于绝大多数技术人来说，往往会忽略自己在行业里的影响力，更多是埋头在自己所在的技术领域里，专注于解决具体问题、提升技术能力。&lt;/p&gt;
&lt;p&gt;然而，在现在高速发展且高度内卷的时代下，单纯拥有技术实力可能并不足以让你脱颖而出，亦或许在短期内有不错的成就，但如果没有影响力支持，这</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人别被AI课割韭菜</title>
    <link href="https://zhulg.github.io/posts/f452b115.html"/>
    <id>https://zhulg.github.io/posts/f452b115.html</id>
    <published>2024-08-29T00:17:13.000Z</published>
    <updated>2024-08-29T00:19:55.072Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章，或许会引起那些专门售卖AI课程者的不满。我要强调，这里说的是那些纯粹割韭菜的AI课，真正有深度和干货的课程自然另当别论。</p><p>作为技术人，你是否已经注意到这些现象？这些课程大多打着“大模型”的旗号，内容却五花八门，从AI写作、AI作图、AI编程到用AI快速赚钱等等，无所不包。</p><p>仔细分析这些课程，会发现大多数内容浅显，仅停留在表面应用。课程或许教你如何使用提示词、如何做个图、通过比喻讲解一些模棱两可原理，或教你输出一些文章，整体来看虎头蛇尾。</p><p>这些课程通常存在以下几个问题：</p><ol><li><p>内容浅显：大多数课程只讲解基础概念，缺乏深入的技术原理和流程环节。</p></li><li><p>缺乏实践：很多课程没有实际项目的指导，或者仅通过简单例子介绍AI工具的使用。</p></li><li><p>误导性宣传：有的课程夸大效果，贩卖焦虑，吸引对AI感兴趣的技术人，实际操作远非如此。</p></li></ol><p>例如，之前有新闻报道某些利用AI课虚头大肆卖课割韭菜的事件，某清华教授靠卖AI课狂赚上亿，然而他本人却是门外汉，靠的就是营销割小白韭菜。</p><p>图片</p><p><strong>这些课程是否一无是处？也不尽然。</strong></p><p>对于小白用户，如果想快速了解某些概念，利用现有的AI模型和工具制作图像、视频，这些课程可能会提高工作效率。如果你懒得查资料且有经济条件购买，这类课程也许有帮助。</p><p>但对于技术人来说，这类课程并不建议。你需要防止这些课程误导你对AI和大模型产生错误认识。</p><p>仅知道概念、会使用ChatGPT等AI模型，对于技术人来说远远不够。非技术人如果掌握了提示词的使用，可能比你还会操作，毕竟现在国内也有很多出名的大模型产品，包括百度的文心一言、字节的抖音豆包大模型、腾讯的混元大模型、百川智能的百川大模型、Kimi和科大讯飞的星火大模型等等，一些写作类用户可能使用的更为溜一些。</p><p>技术人学习大模型技术，可以结合自己的情况和发展方向选择一些入门基础课程。以下是我认为需要学习和了解的内容：</p><p>首先，如果你是计算机专业出身或从事技术工作，应了解数学、统计学和编程语言。大模型时代使用较多的是Python语言，但语言只是工具，不要局限于此。</p><p>了解AI大模型的相关名词和概念，它们之间的关联和关系，比如以下这些术语：</p><p>• AI (Artificial Intelligence): 模拟人类智能的计算机系统。</p><p>• Machine Learning (ML): 通过数据训练模型，使计算机能够自动学习和改进。</p><p>• Deep Learning: 使用神经网络进行的机器学习，通常具有多层架构。</p><p>• Neural Network: 模仿人脑结构的计算模型，用于识别模式和预测。</p><p>• Natural Language Processing (NLP): 计算机处理和理解人类语言的技术。</p><p>• Training Data: 用于训练机器学习模型的数据集。</p><p>• Model: 通过训练算法从数据中学到的数学表示，用于预测或分类。</p><p>• Algorithm: 一组用于解决特定问题的规则或步骤。</p><p>• Transformer: 现代NLP中的重要模型架构，依赖于自注意力机制。</p><p>• GPT (Generative Pre-trained Transformer): 一种生成式预训练语言模型，用于生成文本。</p><p>其次，了解原理后，需要深入学习大模型所使用的相关技术，如神经网络、卷积神经网络（CNN）、循环神经网络（RNN）、生成对抗网络（GAN），以及用于文本处理的NLP、图像识别的计算机视觉。深入理解Transformer模型的结构和工作原理，学习大模型的训练方法和技巧，如分布式训练、混合精度训练等，学习如何优化大模型的性能和调优超参数。</p><h3 id="最重要的事，自己动手实践。"><a href="#最重要的事，自己动手实践。" class="headerlink" title="最重要的事，自己动手实践。"></a>最重要的事，自己动手实践。</h3><p>可以搭建一些开源大模型，用本地的CPU进行部署，学习API相关调用，进行数据准备和预处理、模型推理和结果解析等操作。通过这些实践，你会对大模型有更深入的理解。对于技术人来说，这还只是知道大模型在每个步骤大概的工作方式。</p><p>技术人学习AI大模型，先理解其工作原理，再去做开源模型部署和调参数以及服务的对接，确实大多数技术人不从事底层大模型开发，但在应用层开发和使用大模型技术时，要多要思考大模型技术如何服务于当前的产品，并与未来的产品业务形态结合，提高效率。</p><p>技术人不要被市面上贩卖焦虑的AI韭菜课所迷惑。 任何技术都有连续性，不是凭空冒出来的新技术，脚踏实地学习技术本质才能实现更多的结合与创新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章，或许会引起那些专门售卖AI课程者的不满。我要强调，这里说的是那些纯粹割韭菜的AI课，真正有深度和干货的课程自然另当别论。&lt;/p&gt;
&lt;p&gt;作为技术人，你是否已经注意到这些现象？这些课程大多打着“大模型”的旗号，内容却五花八门，从AI写作、AI作图、AI编程到用AI快</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>尽早觉醒：找到自己一人能做的互联网生意</title>
    <link href="https://zhulg.github.io/posts/d8de0f99.html"/>
    <id>https://zhulg.github.io/posts/d8de0f99.html</id>
    <published>2024-08-29T00:03:58.000Z</published>
    <updated>2024-08-29T00:06:40.927Z</updated>
    
    <content type="html"><![CDATA[<p>没有经历过裁员的职场是不完美的。</p><p>无论何种原因经历次裁员，可能对心智都是一次提升，前面也写过技术人怎么利用空窗期的文章技术人的空窗期，你的涅槃重生。经历过裁员的时候难免感到复杂和沉重。离开的背后，不仅有情感的波动，还有对未来的深深焦虑。</p><p>当你被通知离职的那一刻，情绪复杂得难以描述。但是，当冷静下来，你会意识到，职场就是一个大染缸，个人的价值往往被淹没在复杂的分工和协作中，逐渐失去了话语权。</p><p>在这样的环境下，早日觉醒，找到自己一人能做的互联网生意比什么都重要，毕竟打工的风险也不小。</p><h2 id="互联网的机遇"><a href="#互联网的机遇" class="headerlink" title="互联网的机遇"></a>互联网的机遇</h2><p>我们生活在一个充满机会的时代，互联网为每个人提供了一个可以大展拳脚的舞台。无论你是程序员、设计师，还是其他领域的专业人士，只要你有点子、有执行力，就有可能通过互联网打造出属于自己的一片天地。</p><p>移动互联网时代许多人通过创业实现财务自由的，他们可能只是做了一个小小的网站，或开发了一款简洁但实用的应用，就这样一步步积累财富，最终实现了阶层跃迁。但这条路并非一帆风顺，成功的背后，是无数次的失败和坚持。互联网的世界瞬息万变，只有那些能够快速适应、不断学习的人，才能真正抓住机遇，脱颖而出。</p><p>为什么？</p><p>因为互联网的诱惑也是巨大的，你有没有注意到，我们身边包括自己，也常常陷入在社交媒体上，刷短视频、看无聊的资讯，时间一晃而过，什么也没得到？这些看似无害的娱乐，其实是在悄悄蚕食我们的注意力和斗志，让我们逐渐迷失方向。我们必须清醒，主动掌控自己的时间和精力，把注意力集中在能带来实际收益的事情上。</p><h2 id="从技术到产品到生意"><a href="#从技术到产品到生意" class="headerlink" title="从技术到产品到生意"></a>从技术到产品到生意</h2><p>作为一名技术人，我曾经也接外包项目，感觉这是技术变现最好的方式。</p><p>毕竟，看上去是最实际的。但事实证明，这条路并没有我想象的那么简单。接外包不仅需要你有深厚的技术功底，更需要你能跟客户进行有效的沟通，还要应对各种突发的需求变化，还有可能最后的薪资以各种理由拿不到，还有很多时候，甲方的要求难以预料，而内部的协作也不尽如人意，搞得人筋疲力尽。还有你帮朋友忙实现了些功能，但聊钱时候又碍于面子，自己也没分成。。</p><p>接外包这种方式虽然能赚点钱，但很难长久，也没有持续的积累，你也不知道你下个项目是什么行业，什么需求，来了就接，你技术也没有深度的。</p><p>相反，我发现，如果我们通过技术产品化，自己做点小生意，反而更容易在长久的时间里积累财富。</p><p>为什么这么说呢？因为通过技术产品化，你不仅可以积累知识，还能把知识转化为产品，形成自己的竞争优势。这种优势，一旦建立起来，就是别人难以轻易复制的壁垒。</p><p>比如，早些年在移动互联网早期非常火热，自己开发了一些APP的工具类应用，这些工具类应用比较有长尾收益，虽然当时看起来很小，但是一些广告收入，一些付费用户还是可以源源不断，也算是工资外的第一桶小金。做自己的一个产品，哪怕小只要持续打磨，在某一个垂直赛道做好，那么在国内这么大的用户基数下，也是可以分一杯羹的。特别是现在AI可以做到辅助你代码，那有些不熟悉的业务领域你也是可以进入的，一旦在这些垂直赛道和传统行业进行数字化、互联网化的同时，你一定可以找到自己的小生意。</p><p>写到这，可能会有人反驳，你说的一些产品市场上已经有很多了，自己再去做毫无意义。但我想告诉你的是，只有亲自去实践，你才能发现那些不为人知的细节，找到属于自己的市场空隙，比如，你做一款产品你就知道那个地区用户最多，那个时间段，什么年龄用户最活跃等等，实践中获得的经验，尝试做自己的生意，哪怕在小，也要尽早做起来（AI时代，利用工具自己完全可以是一个团队）因为这产品只属于你，变做边改。</p><h2 id="觉醒和行动"><a href="#觉醒和行动" class="headerlink" title="觉醒和行动"></a>觉醒和行动</h2><p>在这个充满机遇与挑战的互联网时代，早点醒悟，真的很重要。</p><p>不要总想着依赖团队或者等什么大平台来拯救你，机会是靠自己去找的。别盲目跟风去追那些看似宏大的项目，脚踏实地，先从一个小生意做起。通过不断学习和积累，你会发现，渐渐地，你就拥有了属于自己的核心竞争力。</p><p>行动起来，去找到那个你一个人也能干的互联网生意。</p><p>探索、尝试，不断提升自己。别怕一开始很烂，要边做边改，要有信心持续完善，毕竟这生意属于你自己，也可能带来长尾收益。最重要的是，从中你会有不一样的收获，这也许会成为你未来成功的基石。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没有经历过裁员的职场是不完美的。&lt;/p&gt;
&lt;p&gt;无论何种原因经历次裁员，可能对心智都是一次提升，前面也写过技术人怎么利用空窗期的文章技术人的空窗期，你的涅槃重生。经历过裁员的时候难免感到复杂和沉重。离开的背后，不仅有情感的波动，还有对未来的深深焦虑。&lt;/p&gt;
&lt;p&gt;当你被通</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术人要重视写作能力</title>
    <link href="https://zhulg.github.io/posts/7a5a1805.html"/>
    <id>https://zhulg.github.io/posts/7a5a1805.html</id>
    <published>2024-08-21T15:31:58.000Z</published>
    <updated>2024-08-21T15:35:04.195Z</updated>
    
    <content type="html"><![CDATA[<p>技术人要重视自己起来写作能力的培养</p><p>可观来讲，技术人大部分是偏理科的这部分人，某种程度来讲，大家擅长代码的编写，而又不擅长于写作，无论是从技术博客到用于日报，周报的汇报材料，相比代码书写可能就不是那么轻松。</p><p>那技术人写作能力该不该刻意练习下？答案是肯定的，犹如你代码的写作能力，是需要锻炼起来的，先来看看写作都有哪些好处。</p><h2 id="技术人写作好处"><a href="#技术人写作好处" class="headerlink" title="技术人写作好处"></a>技术人写作好处</h2><p>在高效学习方法里，你可能听说过费曼学习方法，他简单来说，就是当你学习到新知识后，你要能用最简单的话语和描述，向别人清楚地介绍出来，来检验自己是否理解和掌握。</p><p>记得大学时候遇到一个教网络通信的一个教授说，他也是构建我国互联网通信方面的鼻祖人物，他在课堂上经常给我们讲：检验自己是否掌握知识，最好办法就是你给别人介绍时，要达到如同介绍我中午吃了什么饭一样，自己清楚明了，还要别人能听懂。</p><p>听起来话很简单，但他说的意思其实就是费曼学习方法，这里面包含了多个层面的能力锻炼</p><ol><li>知识的总结表达能力</li><li>把知识传播给他人</li><li>一个非常好的学习方法</li></ol><p>一个好的总结和表达能力也是需要通过练习和思考的过程，写作无疑是一个非常好的方式，首先需要把相关技术进行概括和总结，用抽象和简练的文字表达出来。这个过程说起来简单，但是当你实践并尝试写作进行总结和概括时，就需要你深入的理解技术对应的点，点与点关系、到面、面和面直接的关系。</p><p>当把一个复杂的技术能通过总结提炼写下来后，通过自己思考，去繁化简把最容易懂的东西呈现出来时，这也跟后来学习的人一个莫大的帮助，把技术传播下去。</p><p>如果前面2个环节已经做到，那详细这这块你的知识点和技能的掌握一定时一个深入的层次了。</p><p>除此之外，技术人写作能力在问题表达，进度汇报，述职方面等也有很大的帮助，虽有干的好的不如写的好，这样有些方面的贬义评价，但是作为正直的技术人，除了要干的好，也要锻炼自己写做能力，特别写小作文能力，这方面也要客观的学会写作表达。</p><h3 id="技术人怎么练习起来"><a href="#技术人怎么练习起来" class="headerlink" title="技术人怎么练习起来"></a>技术人怎么练习起来</h3><p>写作先从一点点练习起来，从日报，从当天计划开始写起，总结和记录自己要做目标、计划、步骤。</p><p>从日常思考和向上汇报练习写作的能力，了解写作受众时谁，目标群体是谁，所要写的内容大纲是什么，结构是什么样的，要表达和输出的思想是什么，写作前思考这些点后再动起来。</p><ul><li><p>写作的工具和辅助你呈现的数据，画图，图表，AI工具需要知道，这些能帮助你提升效率，并在写作呈现上更生动</p></li><li><p>写作风格上，更要注重语言的简练，能清晰准确表达，对复杂的技术术语能呈现出对应的例子，抽象原理，使枯燥的技术能表达有趣和易懂</p></li><li><p>写作内容上，要具备技术原理的深度，刨根问底，对原理和技术细节要负责，更不要网上拿来主义，缺少验证，不要产生垃圾技术文章，那写作也就没有意义了。</p></li></ul><p><strong>最重要的事要写作起来，思考起来，写作可以锻炼和进步，哪怕一开始写的巨烂无比，加持写加持改进才是最快的练习起来的方式。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;技术人要重视自己起来写作能力的培养&lt;/p&gt;
&lt;p&gt;可观来讲，技术人大部分是偏理科的这部分人，某种程度来讲，大家擅长代码的编写，而又不擅长于写作，无论是从技术博客到用于日报，周报的汇报材料，相比代码书写可能就不是那么轻松。&lt;/p&gt;
&lt;p&gt;那技术人写作能力该不该刻意练习下？答案</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>2024年客户端、前端开发，这些赛道值得你关注</title>
    <link href="https://zhulg.github.io/posts/9826b570.html"/>
    <id>https://zhulg.github.io/posts/9826b570.html</id>
    <published>2024-08-19T05:43:25.000Z</published>
    <updated>2024-08-21T15:33:13.975Z</updated>
    
    <content type="html"><![CDATA[<p>首先，这篇文章没有任何广告，只是给目前前端开发、客户端开发伙伴们的一些个人思考和建议。</p><p>前几年，移动互联网如火如荼，给大家在吃住行方面带来了巨大的便利，也改变了大家的生活方式。外卖、打车、支付、金融等应用极大地方便了人们的日常生活。</p><p>特别是客户端开发的岗位，前几年由于开发需求旺盛，薪资非常可观。但随着移动APP生态的完善，APP的需求也接近饱和，进入了维护期。许多资深前端工程师、客户端Android、iOS、Flutter工程师由于种种原因，职业发展也进入了瓶颈期。一方面担心失业问题，另一方面市场上的新岗位也不如以前多。</p><p><strong>人通常都是有惰性的，即便知道这个行业在走下坡路，可能还是不好轻易的做出改变和尝试新赛道</strong></p><p>确实转型新赛道来进行开发，也有一些学习成本，那我们要尽可能选择适合自己的技术栈，能快速切入的一些领域。</p><p><strong>先尝试的学习和用起来，看看实际写起来是怎么样子的，了解岗位薪资和赛道人数。</strong></p><p>就比如之前做J2EE(现在很少听这个名字了)开发大火时期，业余里进行了Android、iOS研究，没想到在1-2年内业余薪资迅速远远超过了主业工资2倍，且大量移动岗位冒出，那怎么办，放弃J2EE,  顺应时代趋势来开发啊。</p><p>目前，互联网可以说处于Web3.0阶段，这个时期或未来的发展如何，可以看到的是区块链和大模型AI行业。今天先看一下前端和客户端技术人员在区块链行业有哪些可以做的事情。</p><p>这里的区块链指的是区块链相关的开发岗位有哪些可以切入的，也是政府支持和开展的 图片引用：<a href="https://www.gov.cn/" target="_blank" rel="noopener">https://www.gov.cn/</a></p><p><a href="https://www.gov.cn/lianbo/bumen/202401/content_6925730.htm" target="_blank" rel="noopener">2025年初步形成支撑区块链发展标准体系</a></p><p><a href="https://www.gov.cn/lianbo/difang/202405/content_6952135.htm" target="_blank" rel="noopener">上海启动首批国资国企区块链创新应用场景建设</a></p><p><strong>区块链技术是一种分布式账本技术，可以让信息记录更加安全、透明和不可篡改</strong>。从官方发布的信息看，技术可以应用于许多领域，比如共识机制、分布式应用、智能合约、数据上链等。</p><p>那适合前端和客户端开发，又比较好进行切入，或者可以先尝试起来的区块链开发岗都有哪些，薪资如何，我觉得可以从这些方面进行尝试：</p><h3 id="DAPP开发"><a href="#DAPP开发" class="headerlink" title="DAPP开发"></a>DAPP开发</h3><p> 如果你是做前端开发的JavaScript、React、vue不在话下，那可以直接来构建DApp的前端部分，并结合Web3.js或Ethers.js进行智能合约交互。<strong>Web3.js</strong> 用于与以太坊区块链进行交互，支持发送交易、调用智能合约等操作。<strong>Ethers.js</strong> 功能类似于Web3.js，但更加现代化和模块化。</p><p>如果你是客户端开发其实也可以进行DAPP来开发，通过WalletConnect协议，开发支持移动设备的DApp开发，这些都可以沿用一些移动开发的经验。与智能合约进行交互，这部分学习和你在移动开发中与后端API交互的经验相似。</p><h3 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a><strong>智能合约开发</strong></h3><p>无论前端还是客户端如果接触了区块链还可以进行智能合约的开发，可以理解它是自动执行合约条款的代码，运行在区块链上，确保交易的透明和安全。</p><p>智能合约编写语言，主要有Solidity：是太坊及其兼容区块链平台，Rust ：用于Polkadot、Solana区块链平台的智能合约开发，这个可能需要学习一下Solidity, rust语言了。</p><p>如果是前端和客户端开发，这2个语言学习起来还是比较容易的，语法也比较类似 Solidity也有JavaScript的借鉴，rust也是跟kotlin、swift有相似之处。</p><h3 id="其他区块链开发"><a href="#其他区块链开发" class="headerlink" title="其他区块链开发"></a><strong>其他区块链开发</strong></h3><p>还有一些区块链的其他开发方向，比如共识算法、公链开发等。这些需要较高的技术功底，涉及密码学和安全学，可能不太适合目前前端、客户端开发的技术基础。</p><p><strong>DAPP开发和智能合约开发比较适合前端、客户端开发人员尝试切换赛道、可以在业余时间进行学习和研究，而且行业薪资待遇不错，业内人数也不拥挤。</strong>长远看，这是一种技术趋势和应用创新，从上方官方新闻也可以看的出。</p><h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a><strong>思考总结</strong></h2><p>以上就是对前端、客户端开发，比较低成本切换到区块链岗位赛道的建议，可以业余尝试和了解，多学总是没有坏处的。</p><p>技术不是一成不变的，业务需求也是一直变革，前端、客户端开发还是要做好未雨绸缪提升自己技术力。</p><p>切换技术赛道和岗位时，还是要结合自身的技术栈来适应技术潮流，提升竞争力，拓宽自己的岗位选择。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，这篇文章没有任何广告，只是给目前前端开发、客户端开发伙伴们的一些个人思考和建议。&lt;/p&gt;
&lt;p&gt;前几年，移动互联网如火如荼，给大家在吃住行方面带来了巨大的便利，也改变了大家的生活方式。外卖、打车、支付、金融等应用极大地方便了人们的日常生活。&lt;/p&gt;
&lt;p&gt;特别是客户端</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术管理，要用人之长</title>
    <link href="https://zhulg.github.io/posts/34ec9bec.html"/>
    <id>https://zhulg.github.io/posts/34ec9bec.html</id>
    <published>2024-08-18T04:44:11.000Z</published>
    <updated>2024-08-18T05:23:05.990Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在技术团队的管理中，我们常常希望团队能够更符合自己的价值观，在用人方面也更倾向于选择与自己脾气秉性相投的人。</strong></p><p>这种想法很自然，但它也容易让管理者掉入一个陷阱：总是想尽办法去改变团队成员的某个“缺点”，试图让团队成员在性格上趋于一致。然而，这样的团队往往缺少灵气，而改变的结果也常常适得其反。（这里所说的“缺点”，并不是指这些人能力不足或不能胜任工作，而更多是每个人独特的特点或性格因素。）</p><p><strong>自己之前也犯过类似错误，随着团队管理经验磨炼，我们要发挥团队最大战斗力，最重要的在于发现和利用团队成员的长处，而不是执着于修补他们的短板。</strong></p><h2 id="从“改造人”到“成就人”"><a href="#从“改造人”到“成就人”" class="headerlink" title="从“改造人”到“成就人”"></a>从“改造人”到“成就人”</h2><p>技术团队就像一片森林，每棵树都有自己的形状和特点。有的高大挺拔，有的矮小结实，各有各的用处。作为技术管理者，你是选择硬生生地把这些树都修剪成一样的模样，还是让它们各自生长，发挥所长？</p><p>当你试图改变某个工程师的短处，比如让一个不擅长沟通的人变得能说会道，你可能会发现，这个过程不仅让他痛苦，也让你头疼。因为短板往往是根深蒂固的特质，并不容易被改变。结果，搞不好你花了大力气，他却失去了本来的优势——那个他最擅长的领域反倒退步了。</p><p>试图改造别人，往往是一条崎岖不平的路。与其逼迫每个人去做自己不擅长的事，不如看看他们究竟有什么特长，然后把这些特长发挥出来。这样，你不仅能看到更好的结果，团队的士气也会随之提升。</p><h2 id="现实例子"><a href="#现实例子" class="headerlink" title="现实例子"></a>现实例子</h2><p>说到管理团队，举个例子，如果做为管理者带过团队，你可能也有共鸣，比如有两位主管，A和B。他们的管理方式截然不同。</p><p>A主管是个严谨的人，凡事都喜欢亲力亲为。他的团队成员几乎没有什么决策空间，因为A主管总是喜欢把关每个细节。他常常告诉团队成员：“你这样不行，那样也不对。有些可能也是自己不擅长的领域，但成员碍于面子不想反驳，久而久之，团队里的人都觉得压力山大，干劲儿被磨得差不多了，创新的火花也渐渐熄灭了。（某种程度的一言堂）</p><p>B主管呢，他的做法则显得更加轻松。他会先了解每个团队成员的优点，然后有针对性地安排任务。B主管喜欢说：“你在这方面很有一套，试试看能不能搞出点新东西。”在他的团队里，大家自由发挥，气氛活跃。于是，团队成员的积极性高了，项目进度和质量也都相当不错。</p><p>两个不同的管理方式，带来了截然不同的结果。A主管执着于修正下属的缺点，结果使得团队士气低落，项目进展不顺；而B主管则注重挖掘和利用下属的长处，团队反而呈现出一片生机勃勃的景象。</p><h2 id="用人之长提升团队"><a href="#用人之长提升团队" class="headerlink" title="用人之长提升团队"></a>用人之长提升团队</h2><p>作为技术管理者，你的任务不仅仅是指挥和监督，更重要的是发现团队成员的优势，并把这些优势最大化。一个好的管理者，像是一名园丁，懂得如何修剪树木让它们更好地生长，而不是强迫它们长成同一个模样。</p><p>在识别团队成员的长处时，要多观察他们的工作表现，听听他们对工作的想法和建议。有人喜欢钻研技术，有人擅长团队协作，还有人对项目管理得心应手。找到这些优势后，你要做的就是把他们放在合适的位置上，让他们在擅长的领域内发光发热。</p><p>举个例子，对于那些技术能力超强的工程师，给他们挑战性的任务，同时提供一定的自由度，让他们可以发挥创造力。而对于那些沟通能力强的成员，可以让他们负责跨部门的协调工作，确保团队和其他部门的顺畅合作。</p><h2 id="用人之长提升管理"><a href="#用人之长提升管理" class="headerlink" title="用人之长提升管理"></a>用人之长提升管理</h2><p>技术管理是一门艺术，而不是一门科学。管理者的职责，不是强行让每个成员变得“完美”，而是要发现每个人的长处，并加以利用。就像一支乐队，各种乐器各司其职，才能奏出和谐的乐章。</p><p>当你放下改造他人的执念，(只要不是他无法胜任问题)，都应转而专注于如何让每个人都在自己擅长的领域发光，你会发现，团队的效率提高了，氛围也好了。这样的团队，不仅能在技术上有所突破，更能在项目中取得成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;在技术团队的管理中，我们常常希望团队能够更符合自己的价值观，在用人方面也更倾向于选择与自己脾气秉性相投的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种想法很自然，但它也容易让管理者掉入一个陷阱：总是想尽办法去改变团队成员的某个“缺点”，试图让团队成员在性格上趋于</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>告别焦虑，技术人的“慢功夫”哲学</title>
    <link href="https://zhulg.github.io/posts/fe63084d.html"/>
    <id>https://zhulg.github.io/posts/fe63084d.html</id>
    <published>2024-08-17T10:25:01.000Z</published>
    <updated>2024-08-17T10:38:54.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="告别焦虑，技术人的“慢功夫”哲学"><a href="#告别焦虑，技术人的“慢功夫”哲学" class="headerlink" title="告别焦虑，技术人的“慢功夫”哲学"></a><strong>告别焦虑，技术人的“慢功夫”哲学</strong></h1><p>我们现在处一个快节奏的时代，每一个行业都在高速发展，我们也常常被告知要抓住每一个机会，快速成长，迅速成功。但对许多技术人来说，所谓的“快”，有时反而会让我们失去平衡，陷入焦虑和迷茫， 常常又进入事倍功半的困境。</p><p>之前遇到过一位刚入行不久的年轻技术人，他一脸焦虑地问我：“如果我现在不快点提高，是不是以后就没机会了？他同事只比他大1岁就已经P7了，心里充满了压力，害怕自己到那个年龄也达不到P7。。。担心自己成长太慢了。</p><p>这种情况并不罕见。在技术领域，很多人都经历过类似的心境：希望自己能够迅速成功，但现实却常常让人感到沮丧。</p><p>我觉得真正的成功往往需要时间的积累和经验的沉淀，不要忽略重要的职业成长哲学——“慢功夫”。</p><h3 id="什么是“慢功夫”？"><a href="#什么是“慢功夫”？" class="headerlink" title="什么是“慢功夫”？"></a><strong>什么是“慢功夫”？</strong></h3><p>我觉得“慢功夫”并不是指要拖延时间，而是一种深刻的成长观念。</p><p>我们在职业发展中，有些人技术人能早早财务自由，有些能有好的机会进入大厂，这里面有自身的能力和努力，但也一定有运气，所以不要焦虑自己没能达到一定的薪资，没有进入好的大厂，一定要有自己的节奏，时间的积累和持续的努力才是成功的关键，更要从内心坚定自己。</p><h3 id="从内心摆脱焦虑"><a href="#从内心摆脱焦虑" class="headerlink" title="从内心摆脱焦虑"></a><strong>从内心摆脱焦虑</strong></h3><p>如前面说到的例子，很多技术人知道这行前期薪资高付出也需要多，而在职业初期都会面临巨大的压力，他们常常担心，如果在毕业后的头几年没有迅速提升自己，那么未来的职业生涯将会受到严重影响。这种焦虑感让他们在短时间内急于求成，结果往往是事倍功半，甚至可能导致职业倦怠。</p><p>摆脱这种焦虑的有效方法之一就是接受“慢功夫”的哲学。认识到成功需要时间，并且在职业发展中保持耐心，会帮助你在长期中找到自己的节奏。</p><p>真正的技术成就往往不是一蹴而就，而是经过不断的实践和学习才，还有运气，在运气没来之前只管坚持正确的努力，从内心要认定这件事。</p><p>慢慢地，你会发现，职业的高度并不完全取决于短期的表现，而是源于持续的积累和深度的成长。</p><h3 id="选择合适的榜样"><a href="#选择合适的榜样" class="headerlink" title="选择合适的榜样"></a><strong>选择合适的榜样</strong></h3><p>在职业发展过程中，</p><p>在寻找职业发展的方向时，选择合适的榜样至关重要。不要过分崇拜那些在年轻时就取得巨大成功的偶像。虽然他们的成就令人钦佩，但这种极端个例并不适用于每个人。</p><p>相反，选择一些经历丰富、成功稳重的前辈作为榜样会更有帮助。例如，巴菲特和芒格等人虽然在年轻时并未显著成名，但他们的职业生涯却是通过长期的积累和稳步的前行获得成功的。这样的榜样能够给予你更为实际的职业发展思路，帮助你在漫长的职业道路上保持坚定的信心。</p><h3 id="一些慢功夫个人建议"><a href="#一些慢功夫个人建议" class="headerlink" title="一些慢功夫个人建议"></a><strong>一些慢功夫个人建议</strong></h3><p><strong>1. 一天一点，慢慢积累：</strong><br>不用急着去掌握所有新技术，也不用担心自己今天还不够“厉害”。每天学习一点新东西，哪怕只是一个新函数、一段代码优化，日积月累，你会发现自己其实进步了很多。关键是保持好奇心和学习的动力，慢慢来，一切都会水到渠成。</p><p><strong>2. 给自己留点喘息的时间：</strong><br>工作不是马拉松，一口气跑到终点可不是好主意。每天工作之余，给自己留点休息的时间，哪怕只是出门散散步、泡杯咖啡，都是让大脑放松的好方法。要知道，休息也是一种生产力，反而能让你在工作中更加高效。</p><p><strong>3. 别急着和别人比：</strong><br>你周围可能有一些同事看起来特别牛，年纪轻轻就拿到了高薪或升职。这种时候，别让自己陷入“别人的成功就是自己的失败”这种心态里。每个人都有自己的节奏，有些人跑得快，有些人走得稳，而最后能坚持到终点的，往往是那些知道自己步伐的人。</p><p><strong>4. 坚持做让自己有成就感的事：</strong></p><p>这点科学家颜宁在一个采访视频里也提到过，她也是这样的，要用一点点的成就感正向激励自己，这点比较重要。在工作中找到一些让自己感到开心、有成就感的事情。可能是解决了一个困扰已久的bug，或者是学会了一个新技术。只要你能从工作中找到这种“小确幸”，你就会慢慢培养出对工作的热爱，而这种热爱，会成为你持续前进的动力。</p><p><strong>5. 给未来留点耐心：</strong><br>成功不是今天努力，明天就立刻能看到结果的事情。要相信，时间会给你回报。那些看似微不足道的努力，日后都会转化为你的竞争力。所以，给自己多点耐心，稳步前进，你会发现，未来的路其实会越走越宽。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然我前面提到过，“慢功夫”要坚持并等待机会，但并不意味着就等机会来敲门，它更像是一种有意识的选择——不慌不忙地提升自己，在每一步中都积累经验。</p><p>成功就像是一道慢火煮的好菜，需要时间来慢慢熬制。与其急功近利，不如踏踏实实地专注于眼前的每一项技能，不断学习，积累经验。给自己设立一个长期的目标，培养出足够的耐心，关注自己的成长，这样才能在未来的职业道路上走得更稳、更远。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;告别焦虑，技术人的“慢功夫”哲学&quot;&gt;&lt;a href=&quot;#告别焦虑，技术人的“慢功夫”哲学&quot; class=&quot;headerlink&quot; title=&quot;告别焦虑，技术人的“慢功夫”哲学&quot;&gt;&lt;/a&gt;&lt;strong&gt;告别焦虑，技术人的“慢功夫”哲学&lt;/strong&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>全栈工程师-基础：共识算法知多少</title>
    <link href="https://zhulg.github.io/posts/68935246.html"/>
    <id>https://zhulg.github.io/posts/68935246.html</id>
    <published>2024-07-30T15:30:59.000Z</published>
    <updated>2024-07-30T15:33:38.165Z</updated>
    
    <content type="html"><![CDATA[<p>共识算法，简单理解是通过算法让参与其中成员共同达成共识。</p><p>在计算机里共识算法主要在分布式系统中通过参与之中的节点，对数据或者状态达成一致的方法。</p><p>那是不是可以理解为参与人，按照认可的规则来就好。</p><p>你可能会想到，那石头剪刀布游戏，参与方也认同这个规则算法，这个算不算共识算法？</p><p>不算。</p><p>虽然它涉及多个参与者之间的决策过程，但它的目的是决定一个赢家，而不是在分布式系统中达成一致的状态。</p><h2 id="共识算法强调什么"><a href="#共识算法强调什么" class="headerlink" title="共识算法强调什么"></a>共识算法强调什么</h2><ul><li><strong>一致性</strong>：确保所有节点在任何时间点都能对某一状态或数据达成一致。</li><li><strong>容错性</strong>：能够容忍一定数量的节点故障或恶意节点的存在，并且系统仍然能够正常运行。</li><li><strong>去中心化</strong>：没有单一的控制节点，所有节点都平等参与共识过程。</li><li><strong>安全性</strong>：防止恶意节点的攻击，确保数据的完整性和不可篡改性。</li></ul><p>其实这些核心也正是在分布式系统里的最基本保障。</p><p>有了大概的理解和概念后，看看现在常用的共识算法都有哪些，这些共识算法不会进行详细展开，因为每一种共识算法，都有复杂的算法基础和相关论文支持，根据汇总的常用算法可以进行深入论文学习。</p><h2 id="共识算法有哪些"><a href="#共识算法有哪些" class="headerlink" title="共识算法有哪些"></a>共识算法有哪些</h2><h3 id="工作量证明（PoW）："><a href="#工作量证明（PoW）：" class="headerlink" title="工作量证明（PoW）："></a><strong>工作量证明（PoW）</strong>：</h3><ul><li>参与者通过解决复杂问题（如数学难题）来证明他们的工作量，从而获得权利执行某些操作。这种方法确保系统不易被攻击。</li><li>例如用于防止垃圾邮件和保护分布式网络的安全性。</li></ul><h3 id="权益证明（PoS）："><a href="#权益证明（PoS）：" class="headerlink" title="权益证明（PoS）："></a><strong>权益证明（PoS）</strong>：</h3><ul><li>持有更多资源（通常是加密货币）的用户，拥有更大的影响力和决策权。这种方法可以确保系统参与者有利益维护系统的稳定和安全。</li><li>最常见应用于加密货币的区块链网络中，如以太坊的Casper协议，通过持有以太币来参与验证和安全维护网络。</li></ul><h3 id="委托权益证明（DPoS）："><a href="#委托权益证明（DPoS）：" class="headerlink" title="委托权益证明（DPoS）："></a>委托<strong>权益证明（DPoS）</strong>：</h3><ul><li>用户通过投票选出少数代表（通常是验证者）来执行决策，以提高系统的效率和扩展性。</li><li><strong>应用场景例子</strong>：用于去中心化的社交媒体平台，如Steemit，用户可以通过持有代币来投票选择内容和平台发展方向的代表。</li></ul><h3 id="拜占庭容错（BFT）："><a href="#拜占庭容错（BFT）：" class="headerlink" title="拜占庭容错（BFT）："></a><strong>拜占庭容错（BFT）</strong>：</h3><ul><li>系统通过多轮投票确保即使在存在恶意节点的情况下也能达成一致，增强系统的安全性和可靠性。</li><li>广泛用于航空航天、军事和金融领域的分布式系统，确保在存在恶意节点的情况下系统仍能正常运行。</li></ul><h3 id="实用拜占庭容错（PBFT）："><a href="#实用拜占庭容错（PBFT）：" class="headerlink" title="实用拜占庭容错（PBFT）："></a><strong>实用拜占庭容错（PBFT）</strong>：</h3><ul><li>预选的节点通过多轮投票快速达成共识，适用于需要高效和低延迟的分布式系统。</li><li><strong>应用场景例子</strong>：企业内部的分布式数据库管理系统，如Ripple的XRP Ledger，通过PBFT算法快速确认和执行跨国支付交易。</li></ul><p>以下这几个更多用在区块链相关的共识算法上，可以稍微了解下证明容量（PoC）、证明燃烧（PoB）和证明时间和空间（PoST）是共识算法，通过提供存储空间、销毁资源或等待时间来获得操作权。PoC鼓励资源共享，PoB减少资源供应防止滥用，PoST结合存储和时间增加系统安全性，确保资源公平分配。这些算法在区块链和其他分布式系统中广泛应用，如分布式存储、在线服务和云存储。</p><p>如前面介绍，共识算法的核心是确保分布式系统中各个节点达成一致，即使有部分节点可能出现故障或恶意行为，基于这些特性，常常在区块链、分布式数据库、云存储等领域使用。有这么一个基础，对后续一些共识领域的理解还是很有帮助的，当然每一个共识算法在具体应用中都需要深入研究和学习，我们文中介绍更多还是先有个核心原理和概念的认知。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;共识算法，简单理解是通过算法让参与其中成员共同达成共识。&lt;/p&gt;
&lt;p&gt;在计算机里共识算法主要在分布式系统中通过参与之中的节点，对数据或者状态达成一致的方法。&lt;/p&gt;
&lt;p&gt;那是不是可以理解为参与人，按照认可的规则来就好。&lt;/p&gt;
&lt;p&gt;你可能会想到，那石头剪刀布游戏，参与</summary>
      
    
    
    
    <category term="区块链" scheme="https://zhulg.github.io/categories/区块链/"/>
    
    
    <category term="区块链" scheme="https://zhulg.github.io/tags/区块链/"/>
    
  </entry>
  
  <entry>
    <title>技术人的空窗期,你的涅槃重生</title>
    <link href="https://zhulg.github.io/posts/de2623a0.html"/>
    <id>https://zhulg.github.io/posts/de2623a0.html</id>
    <published>2024-07-30T15:23:14.000Z</published>
    <updated>2024-07-30T15:26:56.788Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月，之前的同事们陆续打听有没有在招人，有没有职位空缺，他们有大厂的技术大牛，也有小公司的技术负责人。</p><p>很明显，他们并不是在找更好的跳槽机会，而是遇到了空窗期在找一份稳定踏实的工作，这种无奈和焦虑深深地触动了我，也想写一下自己对这块的一个思考。</p><p><strong>每个技术人或早或晚都会经历职业生涯中的空窗期，包括自己。</strong></p><p>这个空窗期可能会突如其来：比如你负责的项目要突然终止，曾经投入的工作不再需要你，曾经引以为傲的技能变得陈旧过时，然后，你可能会经历长期找不到合适工作的焦虑，看到新技术层出不穷却无力跟上的无助，甚至面对亲朋好友对你职业前景的担忧。这种空窗期就像一片无边无际的黑暗，把你推向深渊，击垮你的自信心。每一次面试的失败都像是一次次否定，让你陷入无尽的自我怀疑之中。</p><p><strong>这一切可能措手不及，同时也残酷无比，这个时期，除了要给自己打气，更要换一种思路来看待这个过程。</strong></p><p>空窗期可能是你的最低谷期，但如果利用得好，这段时间恰恰是你涅槃重生的关键。想一想，在这段时间里，你被迫停下来思考，重新评估自己的目标和方向。虽然这是一个痛苦的过程，但也是一次难得的自我认知之旅。你要反思自己为何会陷入这样的困境，自己真正热爱的是什么，自己究竟想要的是什么。</p><p>在这个过程中，你心理承受着巨大的冲击，焦虑和抑郁时常来袭，仿佛身处无尽的黑暗。然而，正是在这段黑暗中，你将学会了如何与自己对话，如何面对自己的内心。通过深刻的思考和内在的认知调整，你会发现那些曾经模糊不清的目标逐渐变得清晰而坚定。</p><p>空窗期不仅是心理的磨砺，更是意志的锤炼。很多时候，最终拼的不是智商，而是意志力。通过日复一日的坚持，每一次小小的进步，都在无形中为你积蓄力量。你逐渐学会如何更高效地学习新技术，如何更敏锐地捕捉行业动态，如何更智慧地应对职业的挑战。</p><p>乔布斯曾被自己创办的苹果公司解雇。在那段低谷期，他创办了NeXT和Pixar，不断尝试和创新，最终以更强大的姿态回归苹果，带领公司走向巅峰。正是那段空窗期，给了他重新思考和调整的机会，让他能够以新的视角和更深的洞察力面对未来的挑战。</p><p><strong>要成功渡过空窗期，并迎来职业生涯的新起点，这里有几个自己心得思考不妨一起试试：</strong></p><ol><li><strong>持续学习并更新技能</strong>：利用这段时间，系统地学习新技术，更新自己的知识储备。可以通过在线课程、技术论坛、阅读专业书籍等途径来充实自己。</li><li><strong>多交流摸清行业需求</strong>：分享彼此的困惑和经验，相互鼓励，摸清行业需求，帮助彼此度过难关。</li><li><strong>坚持完成小目标</strong>：通过每天的努力，一步步接近自己的大目标。小目标的实现不仅能带来成就感，还能不断激励你前行。</li><li><strong>保持积极的心态</strong>：相信自己终将渡过难关，迎来新的机遇。积极的心态能帮助你更好地面对挑战，找到解决问题的办法。</li></ol><p>技术人的空窗期，不是失败的象征，而是重生的序曲，这段时间是提升自己的宝贵机会。</p><p>最后，无论空窗期有多长，都不要放弃对未来的希望。利用这段时间好好充实自己，重新找到自己的方向和热情。</p><p>相信自己，每一个低谷都是为了迎接更高的山峰，每一段黑暗都是为了见到更亮的光明。技术人的空窗期，正是你涅槃重生的最好时机。</p><p><strong>“沉舟侧畔千帆过，病树前头万木春。”当你度过了这段空窗期，你会发现自己如凤凰般涅槃重生，迎来了一个崭新的起点。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近几个月，之前的同事们陆续打听有没有在招人，有没有职位空缺，他们有大厂的技术大牛，也有小公司的技术负责人。&lt;/p&gt;
&lt;p&gt;很明显，他们并不是在找更好的跳槽机会，而是遇到了空窗期在找一份稳定踏实的工作，这种无奈和焦虑深深地触动了我，也想写一下自己对这块的一个思考。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>想成为技术架构师？这些核心能力你是否已经具备</title>
    <link href="https://zhulg.github.io/posts/667740ac.html"/>
    <id>https://zhulg.github.io/posts/667740ac.html</id>
    <published>2024-07-24T15:08:39.000Z</published>
    <updated>2024-07-24T15:11:41.451Z</updated>
    
    <content type="html"><![CDATA[<p>技术架构师在软件系统开发中扮演着重要的角色，决定了用什么技术、如何架构设计系统、技术攻关、方案选型等</p><p>如同建造高楼大厦，需要安全可靠的图纸和精准无误的规划设计，都离不开架构师的规划建设能力。</p><p>为保证系统稳定可靠，要成为技术架构师需要更要从各个方面练就自己，先来看看架构师职责，以及要具备哪些能力。</p><h3 id="架构师核心职责有哪些"><a href="#架构师核心职责有哪些" class="headerlink" title="架构师核心职责有哪些"></a><strong>架构师核心职责有哪些</strong></h3><ul><li><p>负责软件系统整体架构设计、技术和组件选型、模块间通信管理、数据模型设计等。</p></li><li><p>围绕系统的架构、扩展性、稳定性、技术攻关、安全性等方面进行开展工作，确保系统整体完善水平。</p></li><li><p>通过与业务的深入学习，促使业务和技术的结合，合理架构并设计出符合产品所需要的最优方案。</p></li></ul><p><strong>具备的核心能力</strong></p><p>无论是负责系统的整体架构师，还是在细分领域做架构师，比如后端架构师、前端架构师、客户端架构师，他们的基础核心能力是相通的。</p><p><strong>01 理论基础</strong></p><p>很多做技术的，无论现在所处的阶段，初级还是中高级、架构师都需要基本扎实的基础，这个犹如地基，地基不稳，很多时候高楼大厦也是很难拔地而起的。</p><p>成为技术架构师前，通常需要大量的基础编程积累，在基础编程工作时候要熟知计算机的基础知识。</p><p>这些核心基础包括数据结构、网络传输原理、系统运行原理、控件生命周期、内存管理、IO读写等等。</p><p>如果觉得比较抽象，不妨先从相关图书了解，比如数据结构与算法、操作系统、网络传输、编译原理、图形渲染、算法、linux操作、软件工程等。</p><p>消化掉这些基础科目后能满足最基础知识储备，后续可以针对具体领域进行深入学习。</p><p><strong>02 编程能力</strong></p><p>要成为技术架构师，首先要有扎实的编程能力，虽不可能掌握所有的开发语言来进行编程，但任何一门优秀的开发语言都是相似的。</p><p><strong>编程能力，换句话来说就是使用开发语言解决业务问题的能力。</strong></p><p>在系统构成的整体上，至少要熟练应用一门语言来进行深入编程，可以是后端、前端、移动端、数据、AI领域等。</p><p>我说的是要深入一门语言的编程，并熟知该语言的设计和编译原理。</p><p>从语言的设计源码层面理解，可以是JAVA、GO、Kotlin、OC、Swift、Rust、JavaScript、Flutter、Dart等。</p><p>理解面向对象、函数式、声明式等不同的编程范式，能够根据实际问题选择最适合的编程范式。</p><p>编程时具备算法和数据结构的使用，代码是否可读、可维护、可测试、参与开源项目代码贡献、关注编程思维的提升。</p><p>具备宽泛和深入的编程能力，广度上理解各种语言解决的问题和适合的业务场景，深度上掌握编程实施、结构设计和算法应用。</p><p><strong>03 架构设计能力</strong></p><p>架构师的职责中，设计高效、可扩展、易于维护的系统架构是至关重要的。</p><p>具备好的架构设计能力是需要编程和常用设计原则、设计模式、业务规则、引擎算法等相结合的。</p><p>需要知道对应的SOLID是什么？</p><p>23种设计模式有哪些，他们的使用场景有哪些？</p><p>模块之间的解耦怎么做、模块化怎么搭建、组件化又是什么？</p><p>在整体设计上，如何做分层设计、业务层、数据层、适配层，模块设计上如何划分通用模块、业务组件、数据组件、模块间如何通信、数据库上如何做主从，如何处理并发、如何处理大规模数据访问。</p><p>前端领域架构师要考虑同样问题分层设计、模块化划分、同时考虑前端页面的可插拔功能建设，组件化，动态配置、内存、性能优化、自修复自升级等。</p><p>想成为架构师，可以对比看看是否这些架构设计能力目前的掌握了解程度。</p><p>当然这里面的每一项能力都需要日积月累，刻意练习，不可忽视细节，但也不能陷入细节之中</p><p>架构设计能力关注整个系统全局的建设视野，同时关注核心重要的细节。</p><p><strong>04 业务理解能力</strong></p><p>软件架构设计都离不开对业务的深入理解和预见能力，否则设计出的软件产品可能是一塌糊涂。</p><p>做好业务的学习和理解，可以多深入一线体验业务和产品，结合实际业务流程来对产品进行方案架构设计。</p><p>提高业务理解能力，要主动和业务产品人员一起多交流和反馈，确保技术和业务之间的信息畅通，结合业务提前考虑对应的技术方案预研工作。</p><p>在充分理解业务的基础上，从中抽象梳理出对应的技术架构方案。</p><p>在落地架构设计时，从业务实际情况做出规划、折中技术架构方案，不过度设计。</p><p>这些能力都需要对业务发展的充分理解和认识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;技术架构师在软件系统开发中扮演着重要的角色，决定了用什么技术、如何架构设计系统、技术攻关、方案选型等&lt;/p&gt;
&lt;p&gt;如同建造高楼大厦，需要安全可靠的图纸和精准无误的规划设计，都离不开架构师的规划建设能力。&lt;/p&gt;
&lt;p&gt;为保证系统稳定可靠，要成为技术架构师需要更要从各个方面</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
  <entry>
    <title>技术重构何时做，为什么做要想清楚</title>
    <link href="https://zhulg.github.io/posts/39b94e3a.html"/>
    <id>https://zhulg.github.io/posts/39b94e3a.html</id>
    <published>2024-07-14T10:58:39.000Z</published>
    <updated>2024-07-14T11:01:51.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术重构何时做，为什么做要想清楚"><a href="#技术重构何时做，为什么做要想清楚" class="headerlink" title="技术重构何时做，为什么做要想清楚"></a>技术重构何时做，为什么做要想清楚</h1><p><em>代码重构（Refactoring）是指在不改变代码外部行为的前提下，对代码内部结构进行调整，以提高代码的可读性、可维护性和可扩展性。</em></p><ul><li><p>重构的目标是让代码变得更简洁、更优雅、更容易理解和修改</p></li><li><p>重构不难，何时做，以及为什么要做要想清楚，不要为了重构而重构、不为了KPI 夸大事实来重构。</p></li></ul><h1 id="何时进行代码重构"><a href="#何时进行代码重构" class="headerlink" title="何时进行代码重构"></a>何时进行代码重构</h1><h2 id="1-交付快慢"><a href="#1-交付快慢" class="headerlink" title="1.交付快慢"></a>1.交付快慢</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当写一个需求发现代码新增量比较大，代码编写比较多</span><br><span class="line"></span><br><span class="line">扩展一个功能发现要改动范围比较多，涉及多个文件或者类</span><br></pre></td></tr></table></figure><ul><li><p>可能要考虑是否原来的代码没有基建，造成重复增加代码。</p></li><li><p>扩展的功能没有模块化、没有分层、要反复改动多处。</p></li></ul><p><strong>交付缓慢，当代码变得难以理解和维护且错误频出时，可能就是重构的最佳时机</strong></p><h2 id="2-使用体验"><a href="#2-使用体验" class="headerlink" title="2.使用体验"></a>2.使用体验</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当使用产品时卡顿、不流畅，页面加载时间比较长</span><br><span class="line">使用中应用频繁出错、页面出错，内存读写等问题</span><br></pre></td></tr></table></figure><ul><li>可能需要看下卡顿的原因，性能问题、渲染问题、数据量过大造成请求缓慢等问题，可能来源于代码的效率低下、资源的过度消耗等。</li></ul><p><strong>当系统体验已经严重影响用户了，就需要重构提高系统的响应速度和稳定性</strong></p><h2 id="3-需求变化"><a href="#3-需求变化" class="headerlink" title="3.需求变化"></a>3.需求变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当需求或者业务发生变化时，代码无法通过相关配置进行快速开发</span><br><span class="line">为满足需求变化，需要改动大的模块进行调整，牵一发而动全身的代码调整代价</span><br></pre></td></tr></table></figure><ul><li>需要从架构设计、模块耦合、数据隔离等方面来判断造成代码耦合度高，不能快速响应业务和需求变化的原因。</li></ul><p><strong>更好地适应新的需求变化，此时进行重构，确保系统的灵活性和可扩展性</strong></p><h2 id="4-技术问题"><a href="#4-技术问题" class="headerlink" title="4.技术问题"></a>4.技术问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当原有的系统使用框架、组件在开发需求中不能满足新的呈现形式</span><br><span class="line"></span><br><span class="line">当老的控件开发速度缓慢、还有相关老技术所暴露的安全隐患类问题</span><br></pre></td></tr></table></figure><ul><li>需要评估老技术的局限性，并判断新技术的稳定性、快捷性，能从效率和稳定性上改善老系统</li></ul><p><strong>如果系统依赖于过时的技术，此时需要重构来升级技术、确保系统安全和可维护性。</strong></p><h2 id="5-团队人员变化"><a href="#5-团队人员变化" class="headerlink" title="5.团队人员变化"></a>5.团队人员变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当团队人员发生变化，老的系统、代码无人知晓和熟悉</span><br><span class="line">新人不知道原来逻辑，要看懂别人代码、维护代码成本都会比较高</span><br></pre></td></tr></table></figure><ul><li>当对系统的代码不熟悉，新的扩展和改动逻辑都会是比较危险的事情，可能里面一些坑因为不知道逻辑，导致系统频繁出错。</li></ul><p><strong>此时进行重构可以帮助新成员更快地上手业务、梳理代码逻辑，同时熟悉到系统间关联代码。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;技术重构何时做，为什么做要想清楚&quot;&gt;&lt;a href=&quot;#技术重构何时做，为什么做要想清楚&quot; class=&quot;headerlink&quot; title=&quot;技术重构何时做，为什么做要想清楚&quot;&gt;&lt;/a&gt;技术重构何时做，为什么做要想清楚&lt;/h1&gt;&lt;p&gt;&lt;em&gt;代码重构（Refac</summary>
      
    
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/categories/技术成长/"/>
    
    
    <category term="技术成长" scheme="https://zhulg.github.io/tags/技术成长/"/>
    
  </entry>
  
</feed>
